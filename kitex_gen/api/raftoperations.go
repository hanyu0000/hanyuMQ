// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type RequestVoteArgs_ struct {
	Term         int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	CandidateId  int8   `thrift:"CandidateId,2" frugal:"2,default,i8" json:"CandidateId"`
	LastLogIndex int8   `thrift:"LastLogIndex,3" frugal:"3,default,i8" json:"LastLogIndex"`
	LastLogIterm int8   `thrift:"LastLogIterm,4" frugal:"4,default,i8" json:"LastLogIterm"`
	TopicName    string `thrift:"TopicName,5" frugal:"5,default,string" json:"TopicName"`
	PartName     string `thrift:"PartName,6" frugal:"6,default,string" json:"PartName"`
}

func NewRequestVoteArgs_() *RequestVoteArgs_ {
	return &RequestVoteArgs_{}
}

func (p *RequestVoteArgs_) InitDefault() {
}

func (p *RequestVoteArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *RequestVoteArgs_) GetCandidateId() (v int8) {
	return p.CandidateId
}

func (p *RequestVoteArgs_) GetLastLogIndex() (v int8) {
	return p.LastLogIndex
}

func (p *RequestVoteArgs_) GetLastLogIterm() (v int8) {
	return p.LastLogIterm
}

func (p *RequestVoteArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *RequestVoteArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *RequestVoteArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *RequestVoteArgs_) SetCandidateId(val int8) {
	p.CandidateId = val
}
func (p *RequestVoteArgs_) SetLastLogIndex(val int8) {
	p.LastLogIndex = val
}
func (p *RequestVoteArgs_) SetLastLogIterm(val int8) {
	p.LastLogIterm = val
}
func (p *RequestVoteArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *RequestVoteArgs_) SetPartName(val string) {
	p.PartName = val
}

func (p *RequestVoteArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteArgs_(%+v)", *p)
}

var fieldIDToName_RequestVoteArgs_ = map[int16]string{
	1: "Term",
	2: "CandidateId",
	3: "LastLogIndex",
	4: "LastLogIterm",
	5: "TopicName",
	6: "PartName",
}

type RequestVoteReply struct {
	VoteGranted bool `thrift:"VoteGranted,1" frugal:"1,default,bool" json:"VoteGranted"`
	Term        int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
}

func NewRequestVoteReply() *RequestVoteReply {
	return &RequestVoteReply{}
}

func (p *RequestVoteReply) InitDefault() {
}

func (p *RequestVoteReply) GetVoteGranted() (v bool) {
	return p.VoteGranted
}

func (p *RequestVoteReply) GetTerm() (v int8) {
	return p.Term
}
func (p *RequestVoteReply) SetVoteGranted(val bool) {
	p.VoteGranted = val
}
func (p *RequestVoteReply) SetTerm(val int8) {
	p.Term = val
}

func (p *RequestVoteReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestVoteReply(%+v)", *p)
}

var fieldIDToName_RequestVoteReply = map[int16]string{
	1: "VoteGranted",
	2: "Term",
}

type AppendEntriesArgs_ struct {
	Term         int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId     int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	PrevLogIndex int8   `thrift:"PrevLogIndex,3" frugal:"3,default,i8" json:"PrevLogIndex"`
	PrevLogIterm int8   `thrift:"PrevLogIterm,4" frugal:"4,default,i8" json:"PrevLogIterm"`
	LeaderCommit int8   `thrift:"LeaderCommit,5" frugal:"5,default,i8" json:"LeaderCommit"`
	Entries      []byte `thrift:"Entries,6" frugal:"6,default,binary" json:"Entries"`
	TopicName    string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartName     string `thrift:"PartName,8" frugal:"8,default,string" json:"PartName"`
}

func NewAppendEntriesArgs_() *AppendEntriesArgs_ {
	return &AppendEntriesArgs_{}
}

func (p *AppendEntriesArgs_) InitDefault() {
}

func (p *AppendEntriesArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *AppendEntriesArgs_) GetPrevLogIndex() (v int8) {
	return p.PrevLogIndex
}

func (p *AppendEntriesArgs_) GetPrevLogIterm() (v int8) {
	return p.PrevLogIterm
}

func (p *AppendEntriesArgs_) GetLeaderCommit() (v int8) {
	return p.LeaderCommit
}

func (p *AppendEntriesArgs_) GetEntries() (v []byte) {
	return p.Entries
}

func (p *AppendEntriesArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AppendEntriesArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *AppendEntriesArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *AppendEntriesArgs_) SetPrevLogIndex(val int8) {
	p.PrevLogIndex = val
}
func (p *AppendEntriesArgs_) SetPrevLogIterm(val int8) {
	p.PrevLogIterm = val
}
func (p *AppendEntriesArgs_) SetLeaderCommit(val int8) {
	p.LeaderCommit = val
}
func (p *AppendEntriesArgs_) SetEntries(val []byte) {
	p.Entries = val
}
func (p *AppendEntriesArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AppendEntriesArgs_) SetPartName(val string) {
	p.PartName = val
}

func (p *AppendEntriesArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesArgs_(%+v)", *p)
}

var fieldIDToName_AppendEntriesArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "PrevLogIndex",
	4: "PrevLogIterm",
	5: "LeaderCommit",
	6: "Entries",
	7: "TopicName",
	8: "PartName",
}

type AppendEntriesReply struct {
	Success        bool `thrift:"Success,1" frugal:"1,default,bool" json:"Success"`
	Term           int8 `thrift:"Term,2" frugal:"2,default,i8" json:"Term"`
	Logterm        int8 `thrift:"Logterm,3" frugal:"3,default,i8" json:"Logterm"`
	Termfirstindex int8 `thrift:"Termfirstindex,4" frugal:"4,default,i8" json:"Termfirstindex"`
}

func NewAppendEntriesReply() *AppendEntriesReply {
	return &AppendEntriesReply{}
}

func (p *AppendEntriesReply) InitDefault() {
}

func (p *AppendEntriesReply) GetSuccess() (v bool) {
	return p.Success
}

func (p *AppendEntriesReply) GetTerm() (v int8) {
	return p.Term
}

func (p *AppendEntriesReply) GetLogterm() (v int8) {
	return p.Logterm
}

func (p *AppendEntriesReply) GetTermfirstindex() (v int8) {
	return p.Termfirstindex
}
func (p *AppendEntriesReply) SetSuccess(val bool) {
	p.Success = val
}
func (p *AppendEntriesReply) SetTerm(val int8) {
	p.Term = val
}
func (p *AppendEntriesReply) SetLogterm(val int8) {
	p.Logterm = val
}
func (p *AppendEntriesReply) SetTermfirstindex(val int8) {
	p.Termfirstindex = val
}

func (p *AppendEntriesReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendEntriesReply(%+v)", *p)
}

var fieldIDToName_AppendEntriesReply = map[int16]string{
	1: "Success",
	2: "Term",
	3: "Logterm",
	4: "Termfirstindex",
}

type SnapShotArgs_ struct {
	Term              int8   `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
	LeaderId          int8   `thrift:"LeaderId,2" frugal:"2,default,i8" json:"LeaderId"`
	LastIncludedIndex int8   `thrift:"LastIncludedIndex,3" frugal:"3,default,i8" json:"LastIncludedIndex"`
	LastIncludedTerm  int8   `thrift:"LastIncludedTerm,4" frugal:"4,default,i8" json:"LastIncludedTerm"`
	Log               []byte `thrift:"Log,5" frugal:"5,default,binary" json:"Log"`
	Snapshot          []byte `thrift:"Snapshot,6" frugal:"6,default,binary" json:"Snapshot"`
	TopicName         string `thrift:"TopicName,7" frugal:"7,default,string" json:"TopicName"`
	PartName          string `thrift:"PartName,8" frugal:"8,default,string" json:"PartName"`
}

func NewSnapShotArgs_() *SnapShotArgs_ {
	return &SnapShotArgs_{}
}

func (p *SnapShotArgs_) InitDefault() {
}

func (p *SnapShotArgs_) GetTerm() (v int8) {
	return p.Term
}

func (p *SnapShotArgs_) GetLeaderId() (v int8) {
	return p.LeaderId
}

func (p *SnapShotArgs_) GetLastIncludedIndex() (v int8) {
	return p.LastIncludedIndex
}

func (p *SnapShotArgs_) GetLastIncludedTerm() (v int8) {
	return p.LastIncludedTerm
}

func (p *SnapShotArgs_) GetLog() (v []byte) {
	return p.Log
}

func (p *SnapShotArgs_) GetSnapshot() (v []byte) {
	return p.Snapshot
}

func (p *SnapShotArgs_) GetTopicName() (v string) {
	return p.TopicName
}

func (p *SnapShotArgs_) GetPartName() (v string) {
	return p.PartName
}
func (p *SnapShotArgs_) SetTerm(val int8) {
	p.Term = val
}
func (p *SnapShotArgs_) SetLeaderId(val int8) {
	p.LeaderId = val
}
func (p *SnapShotArgs_) SetLastIncludedIndex(val int8) {
	p.LastIncludedIndex = val
}
func (p *SnapShotArgs_) SetLastIncludedTerm(val int8) {
	p.LastIncludedTerm = val
}
func (p *SnapShotArgs_) SetLog(val []byte) {
	p.Log = val
}
func (p *SnapShotArgs_) SetSnapshot(val []byte) {
	p.Snapshot = val
}
func (p *SnapShotArgs_) SetTopicName(val string) {
	p.TopicName = val
}
func (p *SnapShotArgs_) SetPartName(val string) {
	p.PartName = val
}

func (p *SnapShotArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotArgs_(%+v)", *p)
}

var fieldIDToName_SnapShotArgs_ = map[int16]string{
	1: "Term",
	2: "LeaderId",
	3: "LastIncludedIndex",
	4: "LastIncludedTerm",
	5: "Log",
	6: "Snapshot",
	7: "TopicName",
	8: "PartName",
}

type SnapShotReply struct {
	Term int8 `thrift:"Term,1" frugal:"1,default,i8" json:"Term"`
}

func NewSnapShotReply() *SnapShotReply {
	return &SnapShotReply{}
}

func (p *SnapShotReply) InitDefault() {
}

func (p *SnapShotReply) GetTerm() (v int8) {
	return p.Term
}
func (p *SnapShotReply) SetTerm(val int8) {
	p.Term = val
}

func (p *SnapShotReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnapShotReply(%+v)", *p)
}

var fieldIDToName_SnapShotReply = map[int16]string{
	1: "Term",
}

type PingPongArgs_ struct {
	Ping bool `thrift:"ping,1" frugal:"1,default,bool" json:"ping"`
}

func NewPingPongArgs_() *PingPongArgs_ {
	return &PingPongArgs_{}
}

func (p *PingPongArgs_) InitDefault() {
}

func (p *PingPongArgs_) GetPing() (v bool) {
	return p.Ping
}
func (p *PingPongArgs_) SetPing(val bool) {
	p.Ping = val
}

func (p *PingPongArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongArgs_(%+v)", *p)
}

var fieldIDToName_PingPongArgs_ = map[int16]string{
	1: "ping",
}

type PingPongReply struct {
	Pong bool `thrift:"pong,1" frugal:"1,default,bool" json:"pong"`
}

func NewPingPongReply() *PingPongReply {
	return &PingPongReply{}
}

func (p *PingPongReply) InitDefault() {
}

func (p *PingPongReply) GetPong() (v bool) {
	return p.Pong
}
func (p *PingPongReply) SetPong(val bool) {
	p.Pong = val
}

func (p *PingPongReply) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongReply(%+v)", *p)
}

var fieldIDToName_PingPongReply = map[int16]string{
	1: "pong",
}

type Raft_Operations interface {
	RequestVote(ctx context.Context, rep *RequestVoteArgs_) (r *RequestVoteReply, err error)

	AppendEntries(ctx context.Context, rep *AppendEntriesArgs_) (r *AppendEntriesReply, err error)

	SnapShot(ctx context.Context, rep *SnapShotArgs_) (r *SnapShotReply, err error)

	Pingpongtest(ctx context.Context, req *PingPongArgs_) (r *PingPongReply, err error)
}

type Raft_OperationsRequestVoteArgs struct {
	Rep *RequestVoteArgs_ `thrift:"rep,1" frugal:"1,default,RequestVoteArgs_" json:"rep"`
}

func NewRaft_OperationsRequestVoteArgs() *Raft_OperationsRequestVoteArgs {
	return &Raft_OperationsRequestVoteArgs{}
}

func (p *Raft_OperationsRequestVoteArgs) InitDefault() {
}

var Raft_OperationsRequestVoteArgs_Rep_DEFAULT *RequestVoteArgs_

func (p *Raft_OperationsRequestVoteArgs) GetRep() (v *RequestVoteArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsRequestVoteArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsRequestVoteArgs) SetRep(val *RequestVoteArgs_) {
	p.Rep = val
}

func (p *Raft_OperationsRequestVoteArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsRequestVoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsRequestVoteArgs = map[int16]string{
	1: "rep",
}

type Raft_OperationsRequestVoteResult struct {
	Success *RequestVoteReply `thrift:"success,0,optional" frugal:"0,optional,RequestVoteReply" json:"success,omitempty"`
}

func NewRaft_OperationsRequestVoteResult() *Raft_OperationsRequestVoteResult {
	return &Raft_OperationsRequestVoteResult{}
}

func (p *Raft_OperationsRequestVoteResult) InitDefault() {
}

var Raft_OperationsRequestVoteResult_Success_DEFAULT *RequestVoteReply

func (p *Raft_OperationsRequestVoteResult) GetSuccess() (v *RequestVoteReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsRequestVoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsRequestVoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*RequestVoteReply)
}

func (p *Raft_OperationsRequestVoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsRequestVoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsRequestVoteResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsRequestVoteResult = map[int16]string{
	0: "success",
}

type Raft_OperationsAppendEntriesArgs struct {
	Rep *AppendEntriesArgs_ `thrift:"rep,1" frugal:"1,default,AppendEntriesArgs_" json:"rep"`
}

func NewRaft_OperationsAppendEntriesArgs() *Raft_OperationsAppendEntriesArgs {
	return &Raft_OperationsAppendEntriesArgs{}
}

func (p *Raft_OperationsAppendEntriesArgs) InitDefault() {
}

var Raft_OperationsAppendEntriesArgs_Rep_DEFAULT *AppendEntriesArgs_

func (p *Raft_OperationsAppendEntriesArgs) GetRep() (v *AppendEntriesArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsAppendEntriesArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsAppendEntriesArgs) SetRep(val *AppendEntriesArgs_) {
	p.Rep = val
}

func (p *Raft_OperationsAppendEntriesArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsAppendEntriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsAppendEntriesArgs = map[int16]string{
	1: "rep",
}

type Raft_OperationsAppendEntriesResult struct {
	Success *AppendEntriesReply `thrift:"success,0,optional" frugal:"0,optional,AppendEntriesReply" json:"success,omitempty"`
}

func NewRaft_OperationsAppendEntriesResult() *Raft_OperationsAppendEntriesResult {
	return &Raft_OperationsAppendEntriesResult{}
}

func (p *Raft_OperationsAppendEntriesResult) InitDefault() {
}

var Raft_OperationsAppendEntriesResult_Success_DEFAULT *AppendEntriesReply

func (p *Raft_OperationsAppendEntriesResult) GetSuccess() (v *AppendEntriesReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsAppendEntriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsAppendEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendEntriesReply)
}

func (p *Raft_OperationsAppendEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsAppendEntriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsAppendEntriesResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsAppendEntriesResult = map[int16]string{
	0: "success",
}

type Raft_OperationsSnapShotArgs struct {
	Rep *SnapShotArgs_ `thrift:"rep,1" frugal:"1,default,SnapShotArgs_" json:"rep"`
}

func NewRaft_OperationsSnapShotArgs() *Raft_OperationsSnapShotArgs {
	return &Raft_OperationsSnapShotArgs{}
}

func (p *Raft_OperationsSnapShotArgs) InitDefault() {
}

var Raft_OperationsSnapShotArgs_Rep_DEFAULT *SnapShotArgs_

func (p *Raft_OperationsSnapShotArgs) GetRep() (v *SnapShotArgs_) {
	if !p.IsSetRep() {
		return Raft_OperationsSnapShotArgs_Rep_DEFAULT
	}
	return p.Rep
}
func (p *Raft_OperationsSnapShotArgs) SetRep(val *SnapShotArgs_) {
	p.Rep = val
}

func (p *Raft_OperationsSnapShotArgs) IsSetRep() bool {
	return p.Rep != nil
}

func (p *Raft_OperationsSnapShotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsSnapShotArgs = map[int16]string{
	1: "rep",
}

type Raft_OperationsSnapShotResult struct {
	Success *SnapShotReply `thrift:"success,0,optional" frugal:"0,optional,SnapShotReply" json:"success,omitempty"`
}

func NewRaft_OperationsSnapShotResult() *Raft_OperationsSnapShotResult {
	return &Raft_OperationsSnapShotResult{}
}

func (p *Raft_OperationsSnapShotResult) InitDefault() {
}

var Raft_OperationsSnapShotResult_Success_DEFAULT *SnapShotReply

func (p *Raft_OperationsSnapShotResult) GetSuccess() (v *SnapShotReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsSnapShotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsSnapShotResult) SetSuccess(x interface{}) {
	p.Success = x.(*SnapShotReply)
}

func (p *Raft_OperationsSnapShotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsSnapShotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsSnapShotResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsSnapShotResult = map[int16]string{
	0: "success",
}

type Raft_OperationsPingpongtestArgs struct {
	Req *PingPongArgs_ `thrift:"req,1" frugal:"1,default,PingPongArgs_" json:"req"`
}

func NewRaft_OperationsPingpongtestArgs() *Raft_OperationsPingpongtestArgs {
	return &Raft_OperationsPingpongtestArgs{}
}

func (p *Raft_OperationsPingpongtestArgs) InitDefault() {
}

var Raft_OperationsPingpongtestArgs_Req_DEFAULT *PingPongArgs_

func (p *Raft_OperationsPingpongtestArgs) GetReq() (v *PingPongArgs_) {
	if !p.IsSetReq() {
		return Raft_OperationsPingpongtestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Raft_OperationsPingpongtestArgs) SetReq(val *PingPongArgs_) {
	p.Req = val
}

func (p *Raft_OperationsPingpongtestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Raft_OperationsPingpongtestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsPingpongtestArgs(%+v)", *p)
}

var fieldIDToName_Raft_OperationsPingpongtestArgs = map[int16]string{
	1: "req",
}

type Raft_OperationsPingpongtestResult struct {
	Success *PingPongReply `thrift:"success,0,optional" frugal:"0,optional,PingPongReply" json:"success,omitempty"`
}

func NewRaft_OperationsPingpongtestResult() *Raft_OperationsPingpongtestResult {
	return &Raft_OperationsPingpongtestResult{}
}

func (p *Raft_OperationsPingpongtestResult) InitDefault() {
}

var Raft_OperationsPingpongtestResult_Success_DEFAULT *PingPongReply

func (p *Raft_OperationsPingpongtestResult) GetSuccess() (v *PingPongReply) {
	if !p.IsSetSuccess() {
		return Raft_OperationsPingpongtestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Raft_OperationsPingpongtestResult) SetSuccess(x interface{}) {
	p.Success = x.(*PingPongReply)
}

func (p *Raft_OperationsPingpongtestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Raft_OperationsPingpongtestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Raft_OperationsPingpongtestResult(%+v)", *p)
}

var fieldIDToName_Raft_OperationsPingpongtestResult = map[int16]string{
	0: "success",
}
