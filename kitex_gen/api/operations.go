// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type PushRequest struct {
	Producer string `thrift:"producer,1" frugal:"1,default,string" json:"producer"`
	Topic    string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key      string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Message  []byte `thrift:"message,4" frugal:"4,default,binary" json:"message"`
}

func NewPushRequest() *PushRequest {
	return &PushRequest{}
}

func (p *PushRequest) InitDefault() {
}

func (p *PushRequest) GetProducer() (v string) {
	return p.Producer
}

func (p *PushRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PushRequest) GetKey() (v string) {
	return p.Key
}

func (p *PushRequest) GetMessage() (v []byte) {
	return p.Message
}
func (p *PushRequest) SetProducer(val string) {
	p.Producer = val
}
func (p *PushRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PushRequest) SetKey(val string) {
	p.Key = val
}
func (p *PushRequest) SetMessage(val []byte) {
	p.Message = val
}

func (p *PushRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushRequest(%+v)", *p)
}

var fieldIDToName_PushRequest = map[int16]string{
	1: "producer",
	2: "topic",
	3: "key",
	4: "message",
}

type PushResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewPushResponse() *PushResponse {
	return &PushResponse{}
}

func (p *PushResponse) InitDefault() {
}

func (p *PushResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *PushResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *PushResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushResponse(%+v)", *p)
}

var fieldIDToName_PushResponse = map[int16]string{
	1: "ret",
}

type PullRequest struct {
	Consumer string `thrift:"consumer,1" frugal:"1,default,string" json:"consumer"`
	Topic    string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key      string `thrift:"key,3" frugal:"3,default,string" json:"key"`
}

func NewPullRequest() *PullRequest {
	return &PullRequest{}
}

func (p *PullRequest) InitDefault() {
}

func (p *PullRequest) GetConsumer() (v string) {
	return p.Consumer
}

func (p *PullRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *PullRequest) GetKey() (v string) {
	return p.Key
}
func (p *PullRequest) SetConsumer(val string) {
	p.Consumer = val
}
func (p *PullRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *PullRequest) SetKey(val string) {
	p.Key = val
}

func (p *PullRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullRequest(%+v)", *p)
}

var fieldIDToName_PullRequest = map[int16]string{
	1: "consumer",
	2: "topic",
	3: "key",
}

type PullResponse struct {
	Msgs []byte `thrift:"Msgs,1" frugal:"1,default,binary" json:"Msgs"`
}

func NewPullResponse() *PullResponse {
	return &PullResponse{}
}

func (p *PullResponse) InitDefault() {
}

func (p *PullResponse) GetMsgs() (v []byte) {
	return p.Msgs
}
func (p *PullResponse) SetMsgs(val []byte) {
	p.Msgs = val
}

func (p *PullResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullResponse(%+v)", *p)
}

var fieldIDToName_PullResponse = map[int16]string{
	1: "Msgs",
}

type InfoRequest struct {
	IpPort string `thrift:"ip_port,1" frugal:"1,default,string" json:"ip_port"`
}

func NewInfoRequest() *InfoRequest {
	return &InfoRequest{}
}

func (p *InfoRequest) InitDefault() {
}

func (p *InfoRequest) GetIpPort() (v string) {
	return p.IpPort
}
func (p *InfoRequest) SetIpPort(val string) {
	p.IpPort = val
}

func (p *InfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoRequest(%+v)", *p)
}

var fieldIDToName_InfoRequest = map[int16]string{
	1: "ip_port",
}

type InfoResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewInfoResponse() *InfoResponse {
	return &InfoResponse{}
}

func (p *InfoResponse) InitDefault() {
}

func (p *InfoResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *InfoResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *InfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoResponse(%+v)", *p)
}

var fieldIDToName_InfoResponse = map[int16]string{
	1: "ret",
}

type InfoGetRequest struct {
	CliName   string `thrift:"cli_name,1" frugal:"1,default,string" json:"cli_name"`
	TopicName string `thrift:"topic_name,2" frugal:"2,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,3" frugal:"3,default,string" json:"part_name"`
	Offset    int64  `thrift:"offset,4" frugal:"4,default,i64" json:"offset"`
	Option    int8   `thrift:"option,5" frugal:"5,default,i8" json:"option"`
}

func NewInfoGetRequest() *InfoGetRequest {
	return &InfoGetRequest{}
}

func (p *InfoGetRequest) InitDefault() {
}

func (p *InfoGetRequest) GetCliName() (v string) {
	return p.CliName
}

func (p *InfoGetRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *InfoGetRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *InfoGetRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *InfoGetRequest) GetOption() (v int8) {
	return p.Option
}
func (p *InfoGetRequest) SetCliName(val string) {
	p.CliName = val
}
func (p *InfoGetRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *InfoGetRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *InfoGetRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *InfoGetRequest) SetOption(val int8) {
	p.Option = val
}

func (p *InfoGetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoGetRequest(%+v)", *p)
}

var fieldIDToName_InfoGetRequest = map[int16]string{
	1: "cli_name",
	2: "topic_name",
	3: "part_name",
	4: "offset",
	5: "option",
}

type InfoGetResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewInfoGetResponse() *InfoGetResponse {
	return &InfoGetResponse{}
}

func (p *InfoGetResponse) InitDefault() {
}

func (p *InfoGetResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *InfoGetResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *InfoGetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoGetResponse(%+v)", *p)
}

var fieldIDToName_InfoGetResponse = map[int16]string{
	1: "ret",
}

type StartGetMessageRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
	FileName  string `thrift:"file_name,3" frugal:"3,default,string" json:"file_name"`
}

func NewStartGetMessageRequest() *StartGetMessageRequest {
	return &StartGetMessageRequest{}
}

func (p *StartGetMessageRequest) InitDefault() {
}

func (p *StartGetMessageRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *StartGetMessageRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *StartGetMessageRequest) GetFileName() (v string) {
	return p.FileName
}
func (p *StartGetMessageRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *StartGetMessageRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *StartGetMessageRequest) SetFileName(val string) {
	p.FileName = val
}

func (p *StartGetMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartGetMessageRequest(%+v)", *p)
}

var fieldIDToName_StartGetMessageRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
	3: "file_name",
}

type StartGetMessageResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewStartGetMessageResponse() *StartGetMessageResponse {
	return &StartGetMessageResponse{}
}

func (p *StartGetMessageResponse) InitDefault() {
}

func (p *StartGetMessageResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *StartGetMessageResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *StartGetMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartGetMessageResponse(%+v)", *p)
}

var fieldIDToName_StartGetMessageResponse = map[int16]string{
	1: "ret",
}

type CloseGetMessageRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
	FileName  string `thrift:"file_name,3" frugal:"3,default,string" json:"file_name"`
	NewName_  string `thrift:"new_name,4" frugal:"4,default,string" json:"new_name"`
}

func NewCloseGetMessageRequest() *CloseGetMessageRequest {
	return &CloseGetMessageRequest{}
}

func (p *CloseGetMessageRequest) InitDefault() {
}

func (p *CloseGetMessageRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CloseGetMessageRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *CloseGetMessageRequest) GetFileName() (v string) {
	return p.FileName
}

func (p *CloseGetMessageRequest) GetNewName_() (v string) {
	return p.NewName_
}
func (p *CloseGetMessageRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CloseGetMessageRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *CloseGetMessageRequest) SetFileName(val string) {
	p.FileName = val
}
func (p *CloseGetMessageRequest) SetNewName_(val string) {
	p.NewName_ = val
}

func (p *CloseGetMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseGetMessageRequest(%+v)", *p)
}

var fieldIDToName_CloseGetMessageRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
	3: "file_name",
	4: "new_name",
}

type CloseGetMessageResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewCloseGetMessageResponse() *CloseGetMessageResponse {
	return &CloseGetMessageResponse{}
}

func (p *CloseGetMessageResponse) InitDefault() {
}

func (p *CloseGetMessageResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *CloseGetMessageResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *CloseGetMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseGetMessageResponse(%+v)", *p)
}

var fieldIDToName_CloseGetMessageResponse = map[int16]string{
	1: "ret",
}

type PrepareAcceptRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
	FileName  string `thrift:"file_name,3" frugal:"3,default,string" json:"file_name"`
}

func NewPrepareAcceptRequest() *PrepareAcceptRequest {
	return &PrepareAcceptRequest{}
}

func (p *PrepareAcceptRequest) InitDefault() {
}

func (p *PrepareAcceptRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *PrepareAcceptRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *PrepareAcceptRequest) GetFileName() (v string) {
	return p.FileName
}
func (p *PrepareAcceptRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *PrepareAcceptRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *PrepareAcceptRequest) SetFileName(val string) {
	p.FileName = val
}

func (p *PrepareAcceptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareAcceptRequest(%+v)", *p)
}

var fieldIDToName_PrepareAcceptRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
	3: "file_name",
}

type PrepareAcceptResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewPrepareAcceptResponse() *PrepareAcceptResponse {
	return &PrepareAcceptResponse{}
}

func (p *PrepareAcceptResponse) InitDefault() {
}

func (p *PrepareAcceptResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PrepareAcceptResponse) GetErr() (v string) {
	return p.Err
}
func (p *PrepareAcceptResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PrepareAcceptResponse) SetErr(val string) {
	p.Err = val
}

func (p *PrepareAcceptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareAcceptResponse(%+v)", *p)
}

var fieldIDToName_PrepareAcceptResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type PrepareStateRequest struct {
	TopicName string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName  string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
	State     int8   `thrift:"State,3" frugal:"3,default,i8" json:"State"`
	Brokers   []byte `thrift:"Brokers,4" frugal:"4,default,binary" json:"Brokers"`
}

func NewPrepareStateRequest() *PrepareStateRequest {
	return &PrepareStateRequest{}
}

func (p *PrepareStateRequest) InitDefault() {
}

func (p *PrepareStateRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *PrepareStateRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *PrepareStateRequest) GetState() (v int8) {
	return p.State
}

func (p *PrepareStateRequest) GetBrokers() (v []byte) {
	return p.Brokers
}
func (p *PrepareStateRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *PrepareStateRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *PrepareStateRequest) SetState(val int8) {
	p.State = val
}
func (p *PrepareStateRequest) SetBrokers(val []byte) {
	p.Brokers = val
}

func (p *PrepareStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareStateRequest(%+v)", *p)
}

var fieldIDToName_PrepareStateRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
	3: "State",
	4: "Brokers",
}

type PrepareStateResponse struct {
	Ret bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	Err string `thrift:"Err,2" frugal:"2,default,string" json:"Err"`
}

func NewPrepareStateResponse() *PrepareStateResponse {
	return &PrepareStateResponse{}
}

func (p *PrepareStateResponse) InitDefault() {
}

func (p *PrepareStateResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PrepareStateResponse) GetErr() (v string) {
	return p.Err
}
func (p *PrepareStateResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PrepareStateResponse) SetErr(val string) {
	p.Err = val
}

func (p *PrepareStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareStateResponse(%+v)", *p)
}

var fieldIDToName_PrepareStateResponse = map[int16]string{
	1: "Ret",
	2: "Err",
}

type CloseAcceptRequest struct {
	TopicName    string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName     string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
	Oldfilename  string `thrift:"oldfilename,3" frugal:"3,default,string" json:"oldfilename"`
	Newfilename_ string `thrift:"newfilename,4" frugal:"4,default,string" json:"newfilename"`
}

func NewCloseAcceptRequest() *CloseAcceptRequest {
	return &CloseAcceptRequest{}
}

func (p *CloseAcceptRequest) InitDefault() {
}

func (p *CloseAcceptRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CloseAcceptRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *CloseAcceptRequest) GetOldfilename() (v string) {
	return p.Oldfilename
}

func (p *CloseAcceptRequest) GetNewfilename_() (v string) {
	return p.Newfilename_
}
func (p *CloseAcceptRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CloseAcceptRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *CloseAcceptRequest) SetOldfilename(val string) {
	p.Oldfilename = val
}
func (p *CloseAcceptRequest) SetNewfilename_(val string) {
	p.Newfilename_ = val
}

func (p *CloseAcceptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseAcceptRequest(%+v)", *p)
}

var fieldIDToName_CloseAcceptRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
	3: "oldfilename",
	4: "newfilename",
}

type CloseAcceptResponse struct {
	Ret        bool  `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Startindex int64 `thrift:"startindex,2" frugal:"2,default,i64" json:"startindex"`
	Endindex   int64 `thrift:"endindex,3" frugal:"3,default,i64" json:"endindex"`
}

func NewCloseAcceptResponse() *CloseAcceptResponse {
	return &CloseAcceptResponse{}
}

func (p *CloseAcceptResponse) InitDefault() {
}

func (p *CloseAcceptResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CloseAcceptResponse) GetStartindex() (v int64) {
	return p.Startindex
}

func (p *CloseAcceptResponse) GetEndindex() (v int64) {
	return p.Endindex
}
func (p *CloseAcceptResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CloseAcceptResponse) SetStartindex(val int64) {
	p.Startindex = val
}
func (p *CloseAcceptResponse) SetEndindex(val int64) {
	p.Endindex = val
}

func (p *CloseAcceptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseAcceptResponse(%+v)", *p)
}

var fieldIDToName_CloseAcceptResponse = map[int16]string{
	1: "ret",
	2: "startindex",
	3: "endindex",
}

type PrepareSendRequest struct {
	Consumer  string `thrift:"consumer,1" frugal:"1,default,string" json:"consumer"`
	TopicName string `thrift:"topic_name,2" frugal:"2,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,3" frugal:"3,default,string" json:"part_name"`
	FileName  string `thrift:"file_name,4" frugal:"4,default,string" json:"file_name"`
	Option    int8   `thrift:"option,5" frugal:"5,default,i8" json:"option"`
	Offset    int64  `thrift:"offset,6" frugal:"6,default,i64" json:"offset"`
}

func NewPrepareSendRequest() *PrepareSendRequest {
	return &PrepareSendRequest{}
}

func (p *PrepareSendRequest) InitDefault() {
}

func (p *PrepareSendRequest) GetConsumer() (v string) {
	return p.Consumer
}

func (p *PrepareSendRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *PrepareSendRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *PrepareSendRequest) GetFileName() (v string) {
	return p.FileName
}

func (p *PrepareSendRequest) GetOption() (v int8) {
	return p.Option
}

func (p *PrepareSendRequest) GetOffset() (v int64) {
	return p.Offset
}
func (p *PrepareSendRequest) SetConsumer(val string) {
	p.Consumer = val
}
func (p *PrepareSendRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *PrepareSendRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *PrepareSendRequest) SetFileName(val string) {
	p.FileName = val
}
func (p *PrepareSendRequest) SetOption(val int8) {
	p.Option = val
}
func (p *PrepareSendRequest) SetOffset(val int64) {
	p.Offset = val
}

func (p *PrepareSendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareSendRequest(%+v)", *p)
}

var fieldIDToName_PrepareSendRequest = map[int16]string{
	1: "consumer",
	2: "topic_name",
	3: "part_name",
	4: "file_name",
	5: "option",
	6: "offset",
}

type PrepareSendResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewPrepareSendResponse() *PrepareSendResponse {
	return &PrepareSendResponse{}
}

func (p *PrepareSendResponse) InitDefault() {
}

func (p *PrepareSendResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *PrepareSendResponse) GetErr() (v string) {
	return p.Err
}
func (p *PrepareSendResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *PrepareSendResponse) SetErr(val string) {
	p.Err = val
}

func (p *PrepareSendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareSendResponse(%+v)", *p)
}

var fieldIDToName_PrepareSendResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type AddRaftPartitionRequest struct {
	TopicName string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName  string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
	Brokers   []byte `thrift:"Brokers,3" frugal:"3,default,binary" json:"Brokers"`
}

func NewAddRaftPartitionRequest() *AddRaftPartitionRequest {
	return &AddRaftPartitionRequest{}
}

func (p *AddRaftPartitionRequest) InitDefault() {
}

func (p *AddRaftPartitionRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AddRaftPartitionRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *AddRaftPartitionRequest) GetBrokers() (v []byte) {
	return p.Brokers
}
func (p *AddRaftPartitionRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AddRaftPartitionRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *AddRaftPartitionRequest) SetBrokers(val []byte) {
	p.Brokers = val
}

func (p *AddRaftPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddRaftPartitionRequest(%+v)", *p)
}

var fieldIDToName_AddRaftPartitionRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
	3: "Brokers",
}

type AddRaftPartitionResponse struct {
	Ret bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	Err string `thrift:"Err,2" frugal:"2,default,string" json:"Err"`
}

func NewAddRaftPartitionResponse() *AddRaftPartitionResponse {
	return &AddRaftPartitionResponse{}
}

func (p *AddRaftPartitionResponse) InitDefault() {
}

func (p *AddRaftPartitionResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *AddRaftPartitionResponse) GetErr() (v string) {
	return p.Err
}
func (p *AddRaftPartitionResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *AddRaftPartitionResponse) SetErr(val string) {
	p.Err = val
}

func (p *AddRaftPartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddRaftPartitionResponse(%+v)", *p)
}

var fieldIDToName_AddRaftPartitionResponse = map[int16]string{
	1: "Ret",
	2: "Err",
}

type CloseRaftPartitionRequest struct {
	TopicName string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName  string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
}

func NewCloseRaftPartitionRequest() *CloseRaftPartitionRequest {
	return &CloseRaftPartitionRequest{}
}

func (p *CloseRaftPartitionRequest) InitDefault() {
}

func (p *CloseRaftPartitionRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CloseRaftPartitionRequest) GetPartName() (v string) {
	return p.PartName
}
func (p *CloseRaftPartitionRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CloseRaftPartitionRequest) SetPartName(val string) {
	p.PartName = val
}

func (p *CloseRaftPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseRaftPartitionRequest(%+v)", *p)
}

var fieldIDToName_CloseRaftPartitionRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
}

type CloseRaftPartitionResponse struct {
	Ret bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	Err string `thrift:"Err,2" frugal:"2,default,string" json:"Err"`
}

func NewCloseRaftPartitionResponse() *CloseRaftPartitionResponse {
	return &CloseRaftPartitionResponse{}
}

func (p *CloseRaftPartitionResponse) InitDefault() {
}

func (p *CloseRaftPartitionResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CloseRaftPartitionResponse) GetErr() (v string) {
	return p.Err
}
func (p *CloseRaftPartitionResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CloseRaftPartitionResponse) SetErr(val string) {
	p.Err = val
}

func (p *CloseRaftPartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseRaftPartitionResponse(%+v)", *p)
}

var fieldIDToName_CloseRaftPartitionResponse = map[int16]string{
	1: "Ret",
	2: "Err",
}

type AddFetchPartitionRequest struct {
	TopicName    string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName     string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
	LeaderBroker string `thrift:"LeaderBroker,3" frugal:"3,default,string" json:"LeaderBroker"`
	HostPort     string `thrift:"HostPort,4" frugal:"4,default,string" json:"HostPort"`
	Brokers      []byte `thrift:"Brokers,5" frugal:"5,default,binary" json:"Brokers"`
	FileName     string `thrift:"FileName,6" frugal:"6,default,string" json:"FileName"`
}

func NewAddFetchPartitionRequest() *AddFetchPartitionRequest {
	return &AddFetchPartitionRequest{}
}

func (p *AddFetchPartitionRequest) InitDefault() {
}

func (p *AddFetchPartitionRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *AddFetchPartitionRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *AddFetchPartitionRequest) GetLeaderBroker() (v string) {
	return p.LeaderBroker
}

func (p *AddFetchPartitionRequest) GetHostPort() (v string) {
	return p.HostPort
}

func (p *AddFetchPartitionRequest) GetBrokers() (v []byte) {
	return p.Brokers
}

func (p *AddFetchPartitionRequest) GetFileName() (v string) {
	return p.FileName
}
func (p *AddFetchPartitionRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AddFetchPartitionRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *AddFetchPartitionRequest) SetLeaderBroker(val string) {
	p.LeaderBroker = val
}
func (p *AddFetchPartitionRequest) SetHostPort(val string) {
	p.HostPort = val
}
func (p *AddFetchPartitionRequest) SetBrokers(val []byte) {
	p.Brokers = val
}
func (p *AddFetchPartitionRequest) SetFileName(val string) {
	p.FileName = val
}

func (p *AddFetchPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFetchPartitionRequest(%+v)", *p)
}

var fieldIDToName_AddFetchPartitionRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
	3: "LeaderBroker",
	4: "HostPort",
	5: "Brokers",
	6: "FileName",
}

type AddFetchPartitionResponse struct {
	Ret bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	Err string `thrift:"Err,2" frugal:"2,default,string" json:"Err"`
}

func NewAddFetchPartitionResponse() *AddFetchPartitionResponse {
	return &AddFetchPartitionResponse{}
}

func (p *AddFetchPartitionResponse) InitDefault() {
}

func (p *AddFetchPartitionResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *AddFetchPartitionResponse) GetErr() (v string) {
	return p.Err
}
func (p *AddFetchPartitionResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *AddFetchPartitionResponse) SetErr(val string) {
	p.Err = val
}

func (p *AddFetchPartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFetchPartitionResponse(%+v)", *p)
}

var fieldIDToName_AddFetchPartitionResponse = map[int16]string{
	1: "Ret",
	2: "Err",
}

type CloseFetchPartitionRequest struct {
	TopicName string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName  string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
}

func NewCloseFetchPartitionRequest() *CloseFetchPartitionRequest {
	return &CloseFetchPartitionRequest{}
}

func (p *CloseFetchPartitionRequest) InitDefault() {
}

func (p *CloseFetchPartitionRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CloseFetchPartitionRequest) GetPartName() (v string) {
	return p.PartName
}
func (p *CloseFetchPartitionRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CloseFetchPartitionRequest) SetPartName(val string) {
	p.PartName = val
}

func (p *CloseFetchPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseFetchPartitionRequest(%+v)", *p)
}

var fieldIDToName_CloseFetchPartitionRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
}

type CloseFetchPartitionResponse struct {
	Ret bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	Err string `thrift:"Err,2" frugal:"2,default,string" json:"Err"`
}

func NewCloseFetchPartitionResponse() *CloseFetchPartitionResponse {
	return &CloseFetchPartitionResponse{}
}

func (p *CloseFetchPartitionResponse) InitDefault() {
}

func (p *CloseFetchPartitionResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CloseFetchPartitionResponse) GetErr() (v string) {
	return p.Err
}
func (p *CloseFetchPartitionResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CloseFetchPartitionResponse) SetErr(val string) {
	p.Err = val
}

func (p *CloseFetchPartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseFetchPartitionResponse(%+v)", *p)
}

var fieldIDToName_CloseFetchPartitionResponse = map[int16]string{
	1: "Ret",
	2: "Err",
}

type BroInfoRequest struct {
	BrokerName     string `thrift:"broker_name,1" frugal:"1,default,string" json:"broker_name"`
	BrokerHostPort string `thrift:"broker_host_port,2" frugal:"2,default,string" json:"broker_host_port"`
}

func NewBroInfoRequest() *BroInfoRequest {
	return &BroInfoRequest{}
}

func (p *BroInfoRequest) InitDefault() {
}

func (p *BroInfoRequest) GetBrokerName() (v string) {
	return p.BrokerName
}

func (p *BroInfoRequest) GetBrokerHostPort() (v string) {
	return p.BrokerHostPort
}
func (p *BroInfoRequest) SetBrokerName(val string) {
	p.BrokerName = val
}
func (p *BroInfoRequest) SetBrokerHostPort(val string) {
	p.BrokerHostPort = val
}

func (p *BroInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroInfoRequest(%+v)", *p)
}

var fieldIDToName_BroInfoRequest = map[int16]string{
	1: "broker_name",
	2: "broker_host_port",
}

type BroInfoResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewBroInfoResponse() *BroInfoResponse {
	return &BroInfoResponse{}
}

func (p *BroInfoResponse) InitDefault() {
}

func (p *BroInfoResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *BroInfoResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *BroInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroInfoResponse(%+v)", *p)
}

var fieldIDToName_BroInfoResponse = map[int16]string{
	1: "ret",
}

type BroGetConfigRequest struct {
	Propertyinfo []byte `thrift:"propertyinfo,1" frugal:"1,default,binary" json:"propertyinfo"`
}

func NewBroGetConfigRequest() *BroGetConfigRequest {
	return &BroGetConfigRequest{}
}

func (p *BroGetConfigRequest) InitDefault() {
}

func (p *BroGetConfigRequest) GetPropertyinfo() (v []byte) {
	return p.Propertyinfo
}
func (p *BroGetConfigRequest) SetPropertyinfo(val []byte) {
	p.Propertyinfo = val
}

func (p *BroGetConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroGetConfigRequest(%+v)", *p)
}

var fieldIDToName_BroGetConfigRequest = map[int16]string{
	1: "propertyinfo",
}

type BroGetConfigResponse struct {
	Ret        bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Brokerinfo []byte `thrift:"brokerinfo,2" frugal:"2,default,binary" json:"brokerinfo"`
}

func NewBroGetConfigResponse() *BroGetConfigResponse {
	return &BroGetConfigResponse{}
}

func (p *BroGetConfigResponse) InitDefault() {
}

func (p *BroGetConfigResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *BroGetConfigResponse) GetBrokerinfo() (v []byte) {
	return p.Brokerinfo
}
func (p *BroGetConfigResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *BroGetConfigResponse) SetBrokerinfo(val []byte) {
	p.Brokerinfo = val
}

func (p *BroGetConfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroGetConfigResponse(%+v)", *p)
}

var fieldIDToName_BroGetConfigResponse = map[int16]string{
	1: "ret",
	2: "brokerinfo",
}

type ProGetBrokRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
}

func NewProGetBrokRequest() *ProGetBrokRequest {
	return &ProGetBrokRequest{}
}

func (p *ProGetBrokRequest) InitDefault() {
}

func (p *ProGetBrokRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *ProGetBrokRequest) GetPartName() (v string) {
	return p.PartName
}
func (p *ProGetBrokRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *ProGetBrokRequest) SetPartName(val string) {
	p.PartName = val
}

func (p *ProGetBrokRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProGetBrokRequest(%+v)", *p)
}

var fieldIDToName_ProGetBrokRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
}

type ProGetBrokResponse struct {
	Ret            bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	BrokerHostPort string `thrift:"broker_host_port,2" frugal:"2,default,string" json:"broker_host_port"`
	Err            string `thrift:"Err,3" frugal:"3,default,string" json:"Err"`
}

func NewProGetBrokResponse() *ProGetBrokResponse {
	return &ProGetBrokResponse{}
}

func (p *ProGetBrokResponse) InitDefault() {
}

func (p *ProGetBrokResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ProGetBrokResponse) GetBrokerHostPort() (v string) {
	return p.BrokerHostPort
}

func (p *ProGetBrokResponse) GetErr() (v string) {
	return p.Err
}
func (p *ProGetBrokResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ProGetBrokResponse) SetBrokerHostPort(val string) {
	p.BrokerHostPort = val
}
func (p *ProGetBrokResponse) SetErr(val string) {
	p.Err = val
}

func (p *ProGetBrokResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProGetBrokResponse(%+v)", *p)
}

var fieldIDToName_ProGetBrokResponse = map[int16]string{
	1: "ret",
	2: "broker_host_port",
	3: "Err",
}

type ConStartGetBrokRequest struct {
	CliName   string `thrift:"cli_name,1" frugal:"1,default,string" json:"cli_name"`
	TopicName string `thrift:"topic_name,2" frugal:"2,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,3" frugal:"3,default,string" json:"part_name"`
	Option    int8   `thrift:"option,4" frugal:"4,default,i8" json:"option"`
	Index     int64  `thrift:"index,5" frugal:"5,default,i64" json:"index"`
}

func NewConStartGetBrokRequest() *ConStartGetBrokRequest {
	return &ConStartGetBrokRequest{}
}

func (p *ConStartGetBrokRequest) InitDefault() {
}

func (p *ConStartGetBrokRequest) GetCliName() (v string) {
	return p.CliName
}

func (p *ConStartGetBrokRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *ConStartGetBrokRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *ConStartGetBrokRequest) GetOption() (v int8) {
	return p.Option
}

func (p *ConStartGetBrokRequest) GetIndex() (v int64) {
	return p.Index
}
func (p *ConStartGetBrokRequest) SetCliName(val string) {
	p.CliName = val
}
func (p *ConStartGetBrokRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *ConStartGetBrokRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *ConStartGetBrokRequest) SetOption(val int8) {
	p.Option = val
}
func (p *ConStartGetBrokRequest) SetIndex(val int64) {
	p.Index = val
}

func (p *ConStartGetBrokRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConStartGetBrokRequest(%+v)", *p)
}

var fieldIDToName_ConStartGetBrokRequest = map[int16]string{
	1: "cli_name",
	2: "topic_name",
	3: "part_name",
	4: "option",
	5: "index",
}

type ConStartGetBrokResponse struct {
	Ret   bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Size  int64  `thrift:"size,2" frugal:"2,default,i64" json:"size"`
	Parts []byte `thrift:"parts,3" frugal:"3,default,binary" json:"parts"`
}

func NewConStartGetBrokResponse() *ConStartGetBrokResponse {
	return &ConStartGetBrokResponse{}
}

func (p *ConStartGetBrokResponse) InitDefault() {
}

func (p *ConStartGetBrokResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *ConStartGetBrokResponse) GetSize() (v int64) {
	return p.Size
}

func (p *ConStartGetBrokResponse) GetParts() (v []byte) {
	return p.Parts
}
func (p *ConStartGetBrokResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *ConStartGetBrokResponse) SetSize(val int64) {
	p.Size = val
}
func (p *ConStartGetBrokResponse) SetParts(val []byte) {
	p.Parts = val
}

func (p *ConStartGetBrokResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConStartGetBrokResponse(%+v)", *p)
}

var fieldIDToName_ConStartGetBrokResponse = map[int16]string{
	1: "ret",
	2: "size",
	3: "parts",
}

type CreateTopicRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
}

func NewCreateTopicRequest() *CreateTopicRequest {
	return &CreateTopicRequest{}
}

func (p *CreateTopicRequest) InitDefault() {
}

func (p *CreateTopicRequest) GetTopicName() (v string) {
	return p.TopicName
}
func (p *CreateTopicRequest) SetTopicName(val string) {
	p.TopicName = val
}

func (p *CreateTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicRequest(%+v)", *p)
}

var fieldIDToName_CreateTopicRequest = map[int16]string{
	1: "topic_name",
}

type CreateTopicResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewCreateTopicResponse() *CreateTopicResponse {
	return &CreateTopicResponse{}
}

func (p *CreateTopicResponse) InitDefault() {
}

func (p *CreateTopicResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CreateTopicResponse) GetErr() (v string) {
	return p.Err
}
func (p *CreateTopicResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CreateTopicResponse) SetErr(val string) {
	p.Err = val
}

func (p *CreateTopicResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicResponse(%+v)", *p)
}

var fieldIDToName_CreateTopicResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type CreatePartRequest struct {
	TopicName string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName  string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
}

func NewCreatePartRequest() *CreatePartRequest {
	return &CreatePartRequest{}
}

func (p *CreatePartRequest) InitDefault() {
}

func (p *CreatePartRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *CreatePartRequest) GetPartName() (v string) {
	return p.PartName
}
func (p *CreatePartRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *CreatePartRequest) SetPartName(val string) {
	p.PartName = val
}

func (p *CreatePartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartRequest(%+v)", *p)
}

var fieldIDToName_CreatePartRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
}

type CreatePartResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewCreatePartResponse() *CreatePartResponse {
	return &CreatePartResponse{}
}

func (p *CreatePartResponse) InitDefault() {
}

func (p *CreatePartResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *CreatePartResponse) GetErr() (v string) {
	return p.Err
}
func (p *CreatePartResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *CreatePartResponse) SetErr(val string) {
	p.Err = val
}

func (p *CreatePartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePartResponse(%+v)", *p)
}

var fieldIDToName_CreatePartResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type SubRequest struct {
	Consumer string `thrift:"consumer,1" frugal:"1,default,string" json:"consumer"`
	Topic    string `thrift:"topic,2" frugal:"2,default,string" json:"topic"`
	Key      string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Option   int8   `thrift:"option,4" frugal:"4,default,i8" json:"option"`
}

func NewSubRequest() *SubRequest {
	return &SubRequest{}
}

func (p *SubRequest) InitDefault() {
}

func (p *SubRequest) GetConsumer() (v string) {
	return p.Consumer
}

func (p *SubRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *SubRequest) GetKey() (v string) {
	return p.Key
}

func (p *SubRequest) GetOption() (v int8) {
	return p.Option
}
func (p *SubRequest) SetConsumer(val string) {
	p.Consumer = val
}
func (p *SubRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *SubRequest) SetKey(val string) {
	p.Key = val
}
func (p *SubRequest) SetOption(val int8) {
	p.Option = val
}

func (p *SubRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubRequest(%+v)", *p)
}

var fieldIDToName_SubRequest = map[int16]string{
	1: "consumer",
	2: "topic",
	3: "key",
	4: "option",
}

type SubResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewSubResponse() *SubResponse {
	return &SubResponse{}
}

func (p *SubResponse) InitDefault() {
}

func (p *SubResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *SubResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *SubResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubResponse(%+v)", *p)
}

var fieldIDToName_SubResponse = map[int16]string{
	1: "ret",
}

type UpdatePTPOffsetRequest struct {
	Topic  string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Part   string `thrift:"part,2" frugal:"2,default,string" json:"part"`
	Offset int64  `thrift:"offset,3" frugal:"3,default,i64" json:"offset"`
}

func NewUpdatePTPOffsetRequest() *UpdatePTPOffsetRequest {
	return &UpdatePTPOffsetRequest{}
}

func (p *UpdatePTPOffsetRequest) InitDefault() {
}

func (p *UpdatePTPOffsetRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *UpdatePTPOffsetRequest) GetPart() (v string) {
	return p.Part
}

func (p *UpdatePTPOffsetRequest) GetOffset() (v int64) {
	return p.Offset
}
func (p *UpdatePTPOffsetRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *UpdatePTPOffsetRequest) SetPart(val string) {
	p.Part = val
}
func (p *UpdatePTPOffsetRequest) SetOffset(val int64) {
	p.Offset = val
}

func (p *UpdatePTPOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePTPOffsetRequest(%+v)", *p)
}

var fieldIDToName_UpdatePTPOffsetRequest = map[int16]string{
	1: "topic",
	2: "part",
	3: "offset",
}

type UpdatePTPOffsetResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewUpdatePTPOffsetResponse() *UpdatePTPOffsetResponse {
	return &UpdatePTPOffsetResponse{}
}

func (p *UpdatePTPOffsetResponse) InitDefault() {
}

func (p *UpdatePTPOffsetResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *UpdatePTPOffsetResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *UpdatePTPOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePTPOffsetResponse(%+v)", *p)
}

var fieldIDToName_UpdatePTPOffsetResponse = map[int16]string{
	1: "ret",
}

type UpdateDupRequest struct {
	Topic      string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Part       string `thrift:"part,2" frugal:"2,default,string" json:"part"`
	BrokerName string `thrift:"BrokerName,3" frugal:"3,default,string" json:"BrokerName"`
	BlockName  string `thrift:"BlockName,4" frugal:"4,default,string" json:"BlockName"`
	EndIndex   int64  `thrift:"EndIndex,5" frugal:"5,default,i64" json:"EndIndex"`
	Leader     bool   `thrift:"leader,6" frugal:"6,default,bool" json:"leader"`
}

func NewUpdateDupRequest() *UpdateDupRequest {
	return &UpdateDupRequest{}
}

func (p *UpdateDupRequest) InitDefault() {
}

func (p *UpdateDupRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *UpdateDupRequest) GetPart() (v string) {
	return p.Part
}

func (p *UpdateDupRequest) GetBrokerName() (v string) {
	return p.BrokerName
}

func (p *UpdateDupRequest) GetBlockName() (v string) {
	return p.BlockName
}

func (p *UpdateDupRequest) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *UpdateDupRequest) GetLeader() (v bool) {
	return p.Leader
}
func (p *UpdateDupRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *UpdateDupRequest) SetPart(val string) {
	p.Part = val
}
func (p *UpdateDupRequest) SetBrokerName(val string) {
	p.BrokerName = val
}
func (p *UpdateDupRequest) SetBlockName(val string) {
	p.BlockName = val
}
func (p *UpdateDupRequest) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *UpdateDupRequest) SetLeader(val bool) {
	p.Leader = val
}

func (p *UpdateDupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDupRequest(%+v)", *p)
}

var fieldIDToName_UpdateDupRequest = map[int16]string{
	1: "topic",
	2: "part",
	3: "BrokerName",
	4: "BlockName",
	5: "EndIndex",
	6: "leader",
}

type UpdateDupResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewUpdateDupResponse() *UpdateDupResponse {
	return &UpdateDupResponse{}
}

func (p *UpdateDupResponse) InitDefault() {
}

func (p *UpdateDupResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *UpdateDupResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *UpdateDupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDupResponse(%+v)", *p)
}

var fieldIDToName_UpdateDupResponse = map[int16]string{
	1: "ret",
}

type SetPartitionStateRequest struct {
	Topic     string `thrift:"topic,1" frugal:"1,default,string" json:"topic"`
	Partition string `thrift:"partition,2" frugal:"2,default,string" json:"partition"`
	Option    int8   `thrift:"option,3" frugal:"3,default,i8" json:"option"`
	Dupnum    int8   `thrift:"dupnum,4" frugal:"4,default,i8" json:"dupnum"`
}

func NewSetPartitionStateRequest() *SetPartitionStateRequest {
	return &SetPartitionStateRequest{}
}

func (p *SetPartitionStateRequest) InitDefault() {
}

func (p *SetPartitionStateRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *SetPartitionStateRequest) GetPartition() (v string) {
	return p.Partition
}

func (p *SetPartitionStateRequest) GetOption() (v int8) {
	return p.Option
}

func (p *SetPartitionStateRequest) GetDupnum() (v int8) {
	return p.Dupnum
}
func (p *SetPartitionStateRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *SetPartitionStateRequest) SetPartition(val string) {
	p.Partition = val
}
func (p *SetPartitionStateRequest) SetOption(val int8) {
	p.Option = val
}
func (p *SetPartitionStateRequest) SetDupnum(val int8) {
	p.Dupnum = val
}

func (p *SetPartitionStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPartitionStateRequest(%+v)", *p)
}

var fieldIDToName_SetPartitionStateRequest = map[int16]string{
	1: "topic",
	2: "partition",
	3: "option",
	4: "dupnum",
}

type SetPartitionStateResponse struct {
	Ret bool   `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
	Err string `thrift:"err,2" frugal:"2,default,string" json:"err"`
}

func NewSetPartitionStateResponse() *SetPartitionStateResponse {
	return &SetPartitionStateResponse{}
}

func (p *SetPartitionStateResponse) InitDefault() {
}

func (p *SetPartitionStateResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *SetPartitionStateResponse) GetErr() (v string) {
	return p.Err
}
func (p *SetPartitionStateResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *SetPartitionStateResponse) SetErr(val string) {
	p.Err = val
}

func (p *SetPartitionStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPartitionStateResponse(%+v)", *p)
}

var fieldIDToName_SetPartitionStateResponse = map[int16]string{
	1: "ret",
	2: "err",
}

type BecomeLeaderRequest struct {
	Broker    string `thrift:"Broker,1" frugal:"1,default,string" json:"Broker"`
	Topic     string `thrift:"Topic,2" frugal:"2,default,string" json:"Topic"`
	Partition string `thrift:"Partition,3" frugal:"3,default,string" json:"Partition"`
}

func NewBecomeLeaderRequest() *BecomeLeaderRequest {
	return &BecomeLeaderRequest{}
}

func (p *BecomeLeaderRequest) InitDefault() {
}

func (p *BecomeLeaderRequest) GetBroker() (v string) {
	return p.Broker
}

func (p *BecomeLeaderRequest) GetTopic() (v string) {
	return p.Topic
}

func (p *BecomeLeaderRequest) GetPartition() (v string) {
	return p.Partition
}
func (p *BecomeLeaderRequest) SetBroker(val string) {
	p.Broker = val
}
func (p *BecomeLeaderRequest) SetTopic(val string) {
	p.Topic = val
}
func (p *BecomeLeaderRequest) SetPartition(val string) {
	p.Partition = val
}

func (p *BecomeLeaderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BecomeLeaderRequest(%+v)", *p)
}

var fieldIDToName_BecomeLeaderRequest = map[int16]string{
	1: "Broker",
	2: "Topic",
	3: "Partition",
}

type BecomeLeaderResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewBecomeLeaderResponse() *BecomeLeaderResponse {
	return &BecomeLeaderResponse{}
}

func (p *BecomeLeaderResponse) InitDefault() {
}

func (p *BecomeLeaderResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *BecomeLeaderResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *BecomeLeaderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BecomeLeaderResponse(%+v)", *p)
}

var fieldIDToName_BecomeLeaderResponse = map[int16]string{
	1: "ret",
}

type GetNewLeaderRequest struct {
	TopicName string `thrift:"TopicName,1" frugal:"1,default,string" json:"TopicName"`
	PartName  string `thrift:"PartName,2" frugal:"2,default,string" json:"PartName"`
	BlockName string `thrift:"BlockName,3" frugal:"3,default,string" json:"BlockName"`
}

func NewGetNewLeaderRequest() *GetNewLeaderRequest {
	return &GetNewLeaderRequest{}
}

func (p *GetNewLeaderRequest) InitDefault() {
}

func (p *GetNewLeaderRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *GetNewLeaderRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *GetNewLeaderRequest) GetBlockName() (v string) {
	return p.BlockName
}
func (p *GetNewLeaderRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *GetNewLeaderRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *GetNewLeaderRequest) SetBlockName(val string) {
	p.BlockName = val
}

func (p *GetNewLeaderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNewLeaderRequest(%+v)", *p)
}

var fieldIDToName_GetNewLeaderRequest = map[int16]string{
	1: "TopicName",
	2: "PartName",
	3: "BlockName",
}

type GetNewLeaderResponse struct {
	Ret          bool   `thrift:"Ret,1" frugal:"1,default,bool" json:"Ret"`
	LeaderBroker string `thrift:"LeaderBroker,2" frugal:"2,default,string" json:"LeaderBroker"`
	HostPort     string `thrift:"HostPort,3" frugal:"3,default,string" json:"HostPort"`
}

func NewGetNewLeaderResponse() *GetNewLeaderResponse {
	return &GetNewLeaderResponse{}
}

func (p *GetNewLeaderResponse) InitDefault() {
}

func (p *GetNewLeaderResponse) GetRet() (v bool) {
	return p.Ret
}

func (p *GetNewLeaderResponse) GetLeaderBroker() (v string) {
	return p.LeaderBroker
}

func (p *GetNewLeaderResponse) GetHostPort() (v string) {
	return p.HostPort
}
func (p *GetNewLeaderResponse) SetRet(val bool) {
	p.Ret = val
}
func (p *GetNewLeaderResponse) SetLeaderBroker(val string) {
	p.LeaderBroker = val
}
func (p *GetNewLeaderResponse) SetHostPort(val string) {
	p.HostPort = val
}

func (p *GetNewLeaderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNewLeaderResponse(%+v)", *p)
}

var fieldIDToName_GetNewLeaderResponse = map[int16]string{
	1: "Ret",
	2: "LeaderBroker",
	3: "HostPort",
}

type PubRequest struct {
	TopicName  string `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	PartName   string `thrift:"part_name,2" frugal:"2,default,string" json:"part_name"`
	StartIndex int64  `thrift:"start_index,3" frugal:"3,default,i64" json:"start_index"`
	EndIndex   int64  `thrift:"end_index,4" frugal:"4,default,i64" json:"end_index"`
	Msg        []byte `thrift:"msg,5" frugal:"5,default,binary" json:"msg"`
}

func NewPubRequest() *PubRequest {
	return &PubRequest{}
}

func (p *PubRequest) InitDefault() {
}

func (p *PubRequest) GetTopicName() (v string) {
	return p.TopicName
}

func (p *PubRequest) GetPartName() (v string) {
	return p.PartName
}

func (p *PubRequest) GetStartIndex() (v int64) {
	return p.StartIndex
}

func (p *PubRequest) GetEndIndex() (v int64) {
	return p.EndIndex
}

func (p *PubRequest) GetMsg() (v []byte) {
	return p.Msg
}
func (p *PubRequest) SetTopicName(val string) {
	p.TopicName = val
}
func (p *PubRequest) SetPartName(val string) {
	p.PartName = val
}
func (p *PubRequest) SetStartIndex(val int64) {
	p.StartIndex = val
}
func (p *PubRequest) SetEndIndex(val int64) {
	p.EndIndex = val
}
func (p *PubRequest) SetMsg(val []byte) {
	p.Msg = val
}

func (p *PubRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubRequest(%+v)", *p)
}

var fieldIDToName_PubRequest = map[int16]string{
	1: "topic_name",
	2: "part_name",
	3: "start_index",
	4: "end_index",
	5: "msg",
}

type PubResponse struct {
	Ret bool `thrift:"ret,1" frugal:"1,default,bool" json:"ret"`
}

func NewPubResponse() *PubResponse {
	return &PubResponse{}
}

func (p *PubResponse) InitDefault() {
}

func (p *PubResponse) GetRet() (v bool) {
	return p.Ret
}
func (p *PubResponse) SetRet(val bool) {
	p.Ret = val
}

func (p *PubResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubResponse(%+v)", *p)
}

var fieldIDToName_PubResponse = map[int16]string{
	1: "ret",
}

type PingPongRequest struct {
	Ping bool `thrift:"ping,1" frugal:"1,default,bool" json:"ping"`
}

func NewPingPongRequest() *PingPongRequest {
	return &PingPongRequest{}
}

func (p *PingPongRequest) InitDefault() {
}

func (p *PingPongRequest) GetPing() (v bool) {
	return p.Ping
}
func (p *PingPongRequest) SetPing(val bool) {
	p.Ping = val
}

func (p *PingPongRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongRequest(%+v)", *p)
}

var fieldIDToName_PingPongRequest = map[int16]string{
	1: "ping",
}

type PingPongResponse struct {
	Pong bool `thrift:"pong,1" frugal:"1,default,bool" json:"pong"`
}

func NewPingPongResponse() *PingPongResponse {
	return &PingPongResponse{}
}

func (p *PingPongResponse) InitDefault() {
}

func (p *PingPongResponse) GetPong() (v bool) {
	return p.Pong
}
func (p *PingPongResponse) SetPong(val bool) {
	p.Pong = val
}

func (p *PingPongResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongResponse(%+v)", *p)
}

var fieldIDToName_PingPongResponse = map[int16]string{
	1: "pong",
}

type Server_Operations interface {
	Push(ctx context.Context, req *PushRequest) (r *PushResponse, err error)

	Pull(ctx context.Context, req *PullRequest) (r *PullResponse, err error)

	ConInfo(ctx context.Context, req *InfoRequest) (r *InfoResponse, err error)

	StarttoGet(ctx context.Context, req *InfoGetRequest) (r *InfoGetResponse, err error)

	PrepareAccept(ctx context.Context, req *PrepareAcceptRequest) (r *PrepareAcceptResponse, err error)

	CloseAccept(ctx context.Context, req *CloseAcceptRequest) (r *CloseAcceptResponse, err error)

	PrepareSend(ctx context.Context, req *PrepareSendRequest) (r *PrepareSendResponse, err error)

	PrepareState(ctx context.Context, req *PrepareStateRequest) (r *PrepareStateResponse, err error)

	AddRaftPartition(ctx context.Context, req *AddRaftPartitionRequest) (r *AddRaftPartitionResponse, err error)

	CloseRaftPartition(ctx context.Context, req *CloseRaftPartitionRequest) (r *CloseRaftPartitionResponse, err error)

	AddFetchPartition(ctx context.Context, req *AddFetchPartitionRequest) (r *AddFetchPartitionResponse, err error)

	CloseFetchPartition(ctx context.Context, req *CloseFetchPartitionRequest) (r *CloseFetchPartitionResponse, err error)
}

type Server_OperationsPushArgs struct {
	Req *PushRequest `thrift:"req,1" frugal:"1,default,PushRequest" json:"req"`
}

func NewServer_OperationsPushArgs() *Server_OperationsPushArgs {
	return &Server_OperationsPushArgs{}
}

func (p *Server_OperationsPushArgs) InitDefault() {
}

var Server_OperationsPushArgs_Req_DEFAULT *PushRequest

func (p *Server_OperationsPushArgs) GetReq() (v *PushRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPushArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPushArgs) SetReq(val *PushRequest) {
	p.Req = val
}

func (p *Server_OperationsPushArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPushResult struct {
	Success *PushResponse `thrift:"success,0,optional" frugal:"0,optional,PushResponse" json:"success,omitempty"`
}

func NewServer_OperationsPushResult() *Server_OperationsPushResult {
	return &Server_OperationsPushResult{}
}

func (p *Server_OperationsPushResult) InitDefault() {
}

var Server_OperationsPushResult_Success_DEFAULT *PushResponse

func (p *Server_OperationsPushResult) GetSuccess() (v *PushResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPushResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPushResult) SetSuccess(x interface{}) {
	p.Success = x.(*PushResponse)
}

func (p *Server_OperationsPushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPushResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPushResult = map[int16]string{
	0: "success",
}

type Server_OperationsPullArgs struct {
	Req *PullRequest `thrift:"req,1" frugal:"1,default,PullRequest" json:"req"`
}

func NewServer_OperationsPullArgs() *Server_OperationsPullArgs {
	return &Server_OperationsPullArgs{}
}

func (p *Server_OperationsPullArgs) InitDefault() {
}

var Server_OperationsPullArgs_Req_DEFAULT *PullRequest

func (p *Server_OperationsPullArgs) GetReq() (v *PullRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPullArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPullArgs) SetReq(val *PullRequest) {
	p.Req = val
}

func (p *Server_OperationsPullArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPullArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPullArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPullArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPullResult struct {
	Success *PullResponse `thrift:"success,0,optional" frugal:"0,optional,PullResponse" json:"success,omitempty"`
}

func NewServer_OperationsPullResult() *Server_OperationsPullResult {
	return &Server_OperationsPullResult{}
}

func (p *Server_OperationsPullResult) InitDefault() {
}

var Server_OperationsPullResult_Success_DEFAULT *PullResponse

func (p *Server_OperationsPullResult) GetSuccess() (v *PullResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPullResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPullResult) SetSuccess(x interface{}) {
	p.Success = x.(*PullResponse)
}

func (p *Server_OperationsPullResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPullResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPullResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPullResult = map[int16]string{
	0: "success",
}

type Server_OperationsConInfoArgs struct {
	Req *InfoRequest `thrift:"req,1" frugal:"1,default,InfoRequest" json:"req"`
}

func NewServer_OperationsConInfoArgs() *Server_OperationsConInfoArgs {
	return &Server_OperationsConInfoArgs{}
}

func (p *Server_OperationsConInfoArgs) InitDefault() {
}

var Server_OperationsConInfoArgs_Req_DEFAULT *InfoRequest

func (p *Server_OperationsConInfoArgs) GetReq() (v *InfoRequest) {
	if !p.IsSetReq() {
		return Server_OperationsConInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsConInfoArgs) SetReq(val *InfoRequest) {
	p.Req = val
}

func (p *Server_OperationsConInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsConInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsConInfoArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsConInfoArgs = map[int16]string{
	1: "req",
}

type Server_OperationsConInfoResult struct {
	Success *InfoResponse `thrift:"success,0,optional" frugal:"0,optional,InfoResponse" json:"success,omitempty"`
}

func NewServer_OperationsConInfoResult() *Server_OperationsConInfoResult {
	return &Server_OperationsConInfoResult{}
}

func (p *Server_OperationsConInfoResult) InitDefault() {
}

var Server_OperationsConInfoResult_Success_DEFAULT *InfoResponse

func (p *Server_OperationsConInfoResult) GetSuccess() (v *InfoResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsConInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsConInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoResponse)
}

func (p *Server_OperationsConInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsConInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsConInfoResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsConInfoResult = map[int16]string{
	0: "success",
}

type Server_OperationsStarttoGetArgs struct {
	Req *InfoGetRequest `thrift:"req,1" frugal:"1,default,InfoGetRequest" json:"req"`
}

func NewServer_OperationsStarttoGetArgs() *Server_OperationsStarttoGetArgs {
	return &Server_OperationsStarttoGetArgs{}
}

func (p *Server_OperationsStarttoGetArgs) InitDefault() {
}

var Server_OperationsStarttoGetArgs_Req_DEFAULT *InfoGetRequest

func (p *Server_OperationsStarttoGetArgs) GetReq() (v *InfoGetRequest) {
	if !p.IsSetReq() {
		return Server_OperationsStarttoGetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsStarttoGetArgs) SetReq(val *InfoGetRequest) {
	p.Req = val
}

func (p *Server_OperationsStarttoGetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsStarttoGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsStarttoGetArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsStarttoGetArgs = map[int16]string{
	1: "req",
}

type Server_OperationsStarttoGetResult struct {
	Success *InfoGetResponse `thrift:"success,0,optional" frugal:"0,optional,InfoGetResponse" json:"success,omitempty"`
}

func NewServer_OperationsStarttoGetResult() *Server_OperationsStarttoGetResult {
	return &Server_OperationsStarttoGetResult{}
}

func (p *Server_OperationsStarttoGetResult) InitDefault() {
}

var Server_OperationsStarttoGetResult_Success_DEFAULT *InfoGetResponse

func (p *Server_OperationsStarttoGetResult) GetSuccess() (v *InfoGetResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsStarttoGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsStarttoGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoGetResponse)
}

func (p *Server_OperationsStarttoGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsStarttoGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsStarttoGetResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsStarttoGetResult = map[int16]string{
	0: "success",
}

type Server_OperationsPrepareAcceptArgs struct {
	Req *PrepareAcceptRequest `thrift:"req,1" frugal:"1,default,PrepareAcceptRequest" json:"req"`
}

func NewServer_OperationsPrepareAcceptArgs() *Server_OperationsPrepareAcceptArgs {
	return &Server_OperationsPrepareAcceptArgs{}
}

func (p *Server_OperationsPrepareAcceptArgs) InitDefault() {
}

var Server_OperationsPrepareAcceptArgs_Req_DEFAULT *PrepareAcceptRequest

func (p *Server_OperationsPrepareAcceptArgs) GetReq() (v *PrepareAcceptRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPrepareAcceptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPrepareAcceptArgs) SetReq(val *PrepareAcceptRequest) {
	p.Req = val
}

func (p *Server_OperationsPrepareAcceptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPrepareAcceptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareAcceptArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareAcceptArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPrepareAcceptResult struct {
	Success *PrepareAcceptResponse `thrift:"success,0,optional" frugal:"0,optional,PrepareAcceptResponse" json:"success,omitempty"`
}

func NewServer_OperationsPrepareAcceptResult() *Server_OperationsPrepareAcceptResult {
	return &Server_OperationsPrepareAcceptResult{}
}

func (p *Server_OperationsPrepareAcceptResult) InitDefault() {
}

var Server_OperationsPrepareAcceptResult_Success_DEFAULT *PrepareAcceptResponse

func (p *Server_OperationsPrepareAcceptResult) GetSuccess() (v *PrepareAcceptResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPrepareAcceptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPrepareAcceptResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrepareAcceptResponse)
}

func (p *Server_OperationsPrepareAcceptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPrepareAcceptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareAcceptResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareAcceptResult = map[int16]string{
	0: "success",
}

type Server_OperationsCloseAcceptArgs struct {
	Req *CloseAcceptRequest `thrift:"req,1" frugal:"1,default,CloseAcceptRequest" json:"req"`
}

func NewServer_OperationsCloseAcceptArgs() *Server_OperationsCloseAcceptArgs {
	return &Server_OperationsCloseAcceptArgs{}
}

func (p *Server_OperationsCloseAcceptArgs) InitDefault() {
}

var Server_OperationsCloseAcceptArgs_Req_DEFAULT *CloseAcceptRequest

func (p *Server_OperationsCloseAcceptArgs) GetReq() (v *CloseAcceptRequest) {
	if !p.IsSetReq() {
		return Server_OperationsCloseAcceptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsCloseAcceptArgs) SetReq(val *CloseAcceptRequest) {
	p.Req = val
}

func (p *Server_OperationsCloseAcceptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsCloseAcceptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseAcceptArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseAcceptArgs = map[int16]string{
	1: "req",
}

type Server_OperationsCloseAcceptResult struct {
	Success *CloseAcceptResponse `thrift:"success,0,optional" frugal:"0,optional,CloseAcceptResponse" json:"success,omitempty"`
}

func NewServer_OperationsCloseAcceptResult() *Server_OperationsCloseAcceptResult {
	return &Server_OperationsCloseAcceptResult{}
}

func (p *Server_OperationsCloseAcceptResult) InitDefault() {
}

var Server_OperationsCloseAcceptResult_Success_DEFAULT *CloseAcceptResponse

func (p *Server_OperationsCloseAcceptResult) GetSuccess() (v *CloseAcceptResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsCloseAcceptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsCloseAcceptResult) SetSuccess(x interface{}) {
	p.Success = x.(*CloseAcceptResponse)
}

func (p *Server_OperationsCloseAcceptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsCloseAcceptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseAcceptResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseAcceptResult = map[int16]string{
	0: "success",
}

type Server_OperationsPrepareSendArgs struct {
	Req *PrepareSendRequest `thrift:"req,1" frugal:"1,default,PrepareSendRequest" json:"req"`
}

func NewServer_OperationsPrepareSendArgs() *Server_OperationsPrepareSendArgs {
	return &Server_OperationsPrepareSendArgs{}
}

func (p *Server_OperationsPrepareSendArgs) InitDefault() {
}

var Server_OperationsPrepareSendArgs_Req_DEFAULT *PrepareSendRequest

func (p *Server_OperationsPrepareSendArgs) GetReq() (v *PrepareSendRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPrepareSendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPrepareSendArgs) SetReq(val *PrepareSendRequest) {
	p.Req = val
}

func (p *Server_OperationsPrepareSendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPrepareSendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareSendArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareSendArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPrepareSendResult struct {
	Success *PrepareSendResponse `thrift:"success,0,optional" frugal:"0,optional,PrepareSendResponse" json:"success,omitempty"`
}

func NewServer_OperationsPrepareSendResult() *Server_OperationsPrepareSendResult {
	return &Server_OperationsPrepareSendResult{}
}

func (p *Server_OperationsPrepareSendResult) InitDefault() {
}

var Server_OperationsPrepareSendResult_Success_DEFAULT *PrepareSendResponse

func (p *Server_OperationsPrepareSendResult) GetSuccess() (v *PrepareSendResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPrepareSendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPrepareSendResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrepareSendResponse)
}

func (p *Server_OperationsPrepareSendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPrepareSendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareSendResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareSendResult = map[int16]string{
	0: "success",
}

type Server_OperationsPrepareStateArgs struct {
	Req *PrepareStateRequest `thrift:"req,1" frugal:"1,default,PrepareStateRequest" json:"req"`
}

func NewServer_OperationsPrepareStateArgs() *Server_OperationsPrepareStateArgs {
	return &Server_OperationsPrepareStateArgs{}
}

func (p *Server_OperationsPrepareStateArgs) InitDefault() {
}

var Server_OperationsPrepareStateArgs_Req_DEFAULT *PrepareStateRequest

func (p *Server_OperationsPrepareStateArgs) GetReq() (v *PrepareStateRequest) {
	if !p.IsSetReq() {
		return Server_OperationsPrepareStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsPrepareStateArgs) SetReq(val *PrepareStateRequest) {
	p.Req = val
}

func (p *Server_OperationsPrepareStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsPrepareStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareStateArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareStateArgs = map[int16]string{
	1: "req",
}

type Server_OperationsPrepareStateResult struct {
	Success *PrepareStateResponse `thrift:"success,0,optional" frugal:"0,optional,PrepareStateResponse" json:"success,omitempty"`
}

func NewServer_OperationsPrepareStateResult() *Server_OperationsPrepareStateResult {
	return &Server_OperationsPrepareStateResult{}
}

func (p *Server_OperationsPrepareStateResult) InitDefault() {
}

var Server_OperationsPrepareStateResult_Success_DEFAULT *PrepareStateResponse

func (p *Server_OperationsPrepareStateResult) GetSuccess() (v *PrepareStateResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsPrepareStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsPrepareStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrepareStateResponse)
}

func (p *Server_OperationsPrepareStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsPrepareStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsPrepareStateResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsPrepareStateResult = map[int16]string{
	0: "success",
}

type Server_OperationsAddRaftPartitionArgs struct {
	Req *AddRaftPartitionRequest `thrift:"req,1" frugal:"1,default,AddRaftPartitionRequest" json:"req"`
}

func NewServer_OperationsAddRaftPartitionArgs() *Server_OperationsAddRaftPartitionArgs {
	return &Server_OperationsAddRaftPartitionArgs{}
}

func (p *Server_OperationsAddRaftPartitionArgs) InitDefault() {
}

var Server_OperationsAddRaftPartitionArgs_Req_DEFAULT *AddRaftPartitionRequest

func (p *Server_OperationsAddRaftPartitionArgs) GetReq() (v *AddRaftPartitionRequest) {
	if !p.IsSetReq() {
		return Server_OperationsAddRaftPartitionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsAddRaftPartitionArgs) SetReq(val *AddRaftPartitionRequest) {
	p.Req = val
}

func (p *Server_OperationsAddRaftPartitionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsAddRaftPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsAddRaftPartitionArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsAddRaftPartitionArgs = map[int16]string{
	1: "req",
}

type Server_OperationsAddRaftPartitionResult struct {
	Success *AddRaftPartitionResponse `thrift:"success,0,optional" frugal:"0,optional,AddRaftPartitionResponse" json:"success,omitempty"`
}

func NewServer_OperationsAddRaftPartitionResult() *Server_OperationsAddRaftPartitionResult {
	return &Server_OperationsAddRaftPartitionResult{}
}

func (p *Server_OperationsAddRaftPartitionResult) InitDefault() {
}

var Server_OperationsAddRaftPartitionResult_Success_DEFAULT *AddRaftPartitionResponse

func (p *Server_OperationsAddRaftPartitionResult) GetSuccess() (v *AddRaftPartitionResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsAddRaftPartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsAddRaftPartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddRaftPartitionResponse)
}

func (p *Server_OperationsAddRaftPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsAddRaftPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsAddRaftPartitionResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsAddRaftPartitionResult = map[int16]string{
	0: "success",
}

type Server_OperationsCloseRaftPartitionArgs struct {
	Req *CloseRaftPartitionRequest `thrift:"req,1" frugal:"1,default,CloseRaftPartitionRequest" json:"req"`
}

func NewServer_OperationsCloseRaftPartitionArgs() *Server_OperationsCloseRaftPartitionArgs {
	return &Server_OperationsCloseRaftPartitionArgs{}
}

func (p *Server_OperationsCloseRaftPartitionArgs) InitDefault() {
}

var Server_OperationsCloseRaftPartitionArgs_Req_DEFAULT *CloseRaftPartitionRequest

func (p *Server_OperationsCloseRaftPartitionArgs) GetReq() (v *CloseRaftPartitionRequest) {
	if !p.IsSetReq() {
		return Server_OperationsCloseRaftPartitionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsCloseRaftPartitionArgs) SetReq(val *CloseRaftPartitionRequest) {
	p.Req = val
}

func (p *Server_OperationsCloseRaftPartitionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsCloseRaftPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseRaftPartitionArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseRaftPartitionArgs = map[int16]string{
	1: "req",
}

type Server_OperationsCloseRaftPartitionResult struct {
	Success *CloseRaftPartitionResponse `thrift:"success,0,optional" frugal:"0,optional,CloseRaftPartitionResponse" json:"success,omitempty"`
}

func NewServer_OperationsCloseRaftPartitionResult() *Server_OperationsCloseRaftPartitionResult {
	return &Server_OperationsCloseRaftPartitionResult{}
}

func (p *Server_OperationsCloseRaftPartitionResult) InitDefault() {
}

var Server_OperationsCloseRaftPartitionResult_Success_DEFAULT *CloseRaftPartitionResponse

func (p *Server_OperationsCloseRaftPartitionResult) GetSuccess() (v *CloseRaftPartitionResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsCloseRaftPartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsCloseRaftPartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CloseRaftPartitionResponse)
}

func (p *Server_OperationsCloseRaftPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsCloseRaftPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseRaftPartitionResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseRaftPartitionResult = map[int16]string{
	0: "success",
}

type Server_OperationsAddFetchPartitionArgs struct {
	Req *AddFetchPartitionRequest `thrift:"req,1" frugal:"1,default,AddFetchPartitionRequest" json:"req"`
}

func NewServer_OperationsAddFetchPartitionArgs() *Server_OperationsAddFetchPartitionArgs {
	return &Server_OperationsAddFetchPartitionArgs{}
}

func (p *Server_OperationsAddFetchPartitionArgs) InitDefault() {
}

var Server_OperationsAddFetchPartitionArgs_Req_DEFAULT *AddFetchPartitionRequest

func (p *Server_OperationsAddFetchPartitionArgs) GetReq() (v *AddFetchPartitionRequest) {
	if !p.IsSetReq() {
		return Server_OperationsAddFetchPartitionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsAddFetchPartitionArgs) SetReq(val *AddFetchPartitionRequest) {
	p.Req = val
}

func (p *Server_OperationsAddFetchPartitionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsAddFetchPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsAddFetchPartitionArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsAddFetchPartitionArgs = map[int16]string{
	1: "req",
}

type Server_OperationsAddFetchPartitionResult struct {
	Success *AddFetchPartitionResponse `thrift:"success,0,optional" frugal:"0,optional,AddFetchPartitionResponse" json:"success,omitempty"`
}

func NewServer_OperationsAddFetchPartitionResult() *Server_OperationsAddFetchPartitionResult {
	return &Server_OperationsAddFetchPartitionResult{}
}

func (p *Server_OperationsAddFetchPartitionResult) InitDefault() {
}

var Server_OperationsAddFetchPartitionResult_Success_DEFAULT *AddFetchPartitionResponse

func (p *Server_OperationsAddFetchPartitionResult) GetSuccess() (v *AddFetchPartitionResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsAddFetchPartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsAddFetchPartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddFetchPartitionResponse)
}

func (p *Server_OperationsAddFetchPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsAddFetchPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsAddFetchPartitionResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsAddFetchPartitionResult = map[int16]string{
	0: "success",
}

type Server_OperationsCloseFetchPartitionArgs struct {
	Req *CloseFetchPartitionRequest `thrift:"req,1" frugal:"1,default,CloseFetchPartitionRequest" json:"req"`
}

func NewServer_OperationsCloseFetchPartitionArgs() *Server_OperationsCloseFetchPartitionArgs {
	return &Server_OperationsCloseFetchPartitionArgs{}
}

func (p *Server_OperationsCloseFetchPartitionArgs) InitDefault() {
}

var Server_OperationsCloseFetchPartitionArgs_Req_DEFAULT *CloseFetchPartitionRequest

func (p *Server_OperationsCloseFetchPartitionArgs) GetReq() (v *CloseFetchPartitionRequest) {
	if !p.IsSetReq() {
		return Server_OperationsCloseFetchPartitionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Server_OperationsCloseFetchPartitionArgs) SetReq(val *CloseFetchPartitionRequest) {
	p.Req = val
}

func (p *Server_OperationsCloseFetchPartitionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Server_OperationsCloseFetchPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseFetchPartitionArgs(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseFetchPartitionArgs = map[int16]string{
	1: "req",
}

type Server_OperationsCloseFetchPartitionResult struct {
	Success *CloseFetchPartitionResponse `thrift:"success,0,optional" frugal:"0,optional,CloseFetchPartitionResponse" json:"success,omitempty"`
}

func NewServer_OperationsCloseFetchPartitionResult() *Server_OperationsCloseFetchPartitionResult {
	return &Server_OperationsCloseFetchPartitionResult{}
}

func (p *Server_OperationsCloseFetchPartitionResult) InitDefault() {
}

var Server_OperationsCloseFetchPartitionResult_Success_DEFAULT *CloseFetchPartitionResponse

func (p *Server_OperationsCloseFetchPartitionResult) GetSuccess() (v *CloseFetchPartitionResponse) {
	if !p.IsSetSuccess() {
		return Server_OperationsCloseFetchPartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Server_OperationsCloseFetchPartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CloseFetchPartitionResponse)
}

func (p *Server_OperationsCloseFetchPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Server_OperationsCloseFetchPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server_OperationsCloseFetchPartitionResult(%+v)", *p)
}

var fieldIDToName_Server_OperationsCloseFetchPartitionResult = map[int16]string{
	0: "success",
}

type ZkServer_Operations interface {
	Sub(ctx context.Context, req *SubRequest) (r *SubResponse, err error)

	CreateTopic(ctx context.Context, req *CreateTopicRequest) (r *CreateTopicResponse, err error)

	CreatePart(ctx context.Context, req *CreatePartRequest) (r *CreatePartResponse, err error)

	ProGetBroker(ctx context.Context, req *ProGetBrokRequest) (r *ProGetBrokResponse, err error)

	SetPartitionState(ctx context.Context, req *SetPartitionStateRequest) (r *SetPartitionStateResponse, err error)

	ConStartGetBroker(ctx context.Context, req *ConStartGetBrokRequest) (r *ConStartGetBrokResponse, err error)

	BroInfo(ctx context.Context, req *BroInfoRequest) (r *BroInfoResponse, err error)

	UpdatePTPOffset(ctx context.Context, req *UpdatePTPOffsetRequest) (r *UpdatePTPOffsetResponse, err error)

	UpdateDup(ctx context.Context, req *UpdateDupRequest) (r *UpdateDupResponse, err error)

	BecomeLeader(ctx context.Context, req *BecomeLeaderRequest) (r *BecomeLeaderResponse, err error)

	GetNewLeader(ctx context.Context, req *GetNewLeaderRequest) (r *GetNewLeaderResponse, err error)

	BroGetConfig(ctx context.Context, req *BroGetConfigRequest) (r *BroGetConfigResponse, err error)
}

type ZkServer_OperationsSubArgs struct {
	Req *SubRequest `thrift:"req,1" frugal:"1,default,SubRequest" json:"req"`
}

func NewZkServer_OperationsSubArgs() *ZkServer_OperationsSubArgs {
	return &ZkServer_OperationsSubArgs{}
}

func (p *ZkServer_OperationsSubArgs) InitDefault() {
}

var ZkServer_OperationsSubArgs_Req_DEFAULT *SubRequest

func (p *ZkServer_OperationsSubArgs) GetReq() (v *SubRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsSubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsSubArgs) SetReq(val *SubRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsSubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsSubArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsSubArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsSubResult struct {
	Success *SubResponse `thrift:"success,0,optional" frugal:"0,optional,SubResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsSubResult() *ZkServer_OperationsSubResult {
	return &ZkServer_OperationsSubResult{}
}

func (p *ZkServer_OperationsSubResult) InitDefault() {
}

var ZkServer_OperationsSubResult_Success_DEFAULT *SubResponse

func (p *ZkServer_OperationsSubResult) GetSuccess() (v *SubResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsSubResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsSubResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubResponse)
}

func (p *ZkServer_OperationsSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsSubResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsSubResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsCreateTopicArgs struct {
	Req *CreateTopicRequest `thrift:"req,1" frugal:"1,default,CreateTopicRequest" json:"req"`
}

func NewZkServer_OperationsCreateTopicArgs() *ZkServer_OperationsCreateTopicArgs {
	return &ZkServer_OperationsCreateTopicArgs{}
}

func (p *ZkServer_OperationsCreateTopicArgs) InitDefault() {
}

var ZkServer_OperationsCreateTopicArgs_Req_DEFAULT *CreateTopicRequest

func (p *ZkServer_OperationsCreateTopicArgs) GetReq() (v *CreateTopicRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsCreateTopicArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsCreateTopicArgs) SetReq(val *CreateTopicRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsCreateTopicArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsCreateTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsCreateTopicArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsCreateTopicArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsCreateTopicResult struct {
	Success *CreateTopicResponse `thrift:"success,0,optional" frugal:"0,optional,CreateTopicResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsCreateTopicResult() *ZkServer_OperationsCreateTopicResult {
	return &ZkServer_OperationsCreateTopicResult{}
}

func (p *ZkServer_OperationsCreateTopicResult) InitDefault() {
}

var ZkServer_OperationsCreateTopicResult_Success_DEFAULT *CreateTopicResponse

func (p *ZkServer_OperationsCreateTopicResult) GetSuccess() (v *CreateTopicResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsCreateTopicResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsCreateTopicResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTopicResponse)
}

func (p *ZkServer_OperationsCreateTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsCreateTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsCreateTopicResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsCreateTopicResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsCreatePartArgs struct {
	Req *CreatePartRequest `thrift:"req,1" frugal:"1,default,CreatePartRequest" json:"req"`
}

func NewZkServer_OperationsCreatePartArgs() *ZkServer_OperationsCreatePartArgs {
	return &ZkServer_OperationsCreatePartArgs{}
}

func (p *ZkServer_OperationsCreatePartArgs) InitDefault() {
}

var ZkServer_OperationsCreatePartArgs_Req_DEFAULT *CreatePartRequest

func (p *ZkServer_OperationsCreatePartArgs) GetReq() (v *CreatePartRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsCreatePartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsCreatePartArgs) SetReq(val *CreatePartRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsCreatePartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsCreatePartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsCreatePartArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsCreatePartArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsCreatePartResult struct {
	Success *CreatePartResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePartResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsCreatePartResult() *ZkServer_OperationsCreatePartResult {
	return &ZkServer_OperationsCreatePartResult{}
}

func (p *ZkServer_OperationsCreatePartResult) InitDefault() {
}

var ZkServer_OperationsCreatePartResult_Success_DEFAULT *CreatePartResponse

func (p *ZkServer_OperationsCreatePartResult) GetSuccess() (v *CreatePartResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsCreatePartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsCreatePartResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePartResponse)
}

func (p *ZkServer_OperationsCreatePartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsCreatePartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsCreatePartResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsCreatePartResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsProGetBrokerArgs struct {
	Req *ProGetBrokRequest `thrift:"req,1" frugal:"1,default,ProGetBrokRequest" json:"req"`
}

func NewZkServer_OperationsProGetBrokerArgs() *ZkServer_OperationsProGetBrokerArgs {
	return &ZkServer_OperationsProGetBrokerArgs{}
}

func (p *ZkServer_OperationsProGetBrokerArgs) InitDefault() {
}

var ZkServer_OperationsProGetBrokerArgs_Req_DEFAULT *ProGetBrokRequest

func (p *ZkServer_OperationsProGetBrokerArgs) GetReq() (v *ProGetBrokRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsProGetBrokerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsProGetBrokerArgs) SetReq(val *ProGetBrokRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsProGetBrokerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsProGetBrokerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsProGetBrokerArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsProGetBrokerArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsProGetBrokerResult struct {
	Success *ProGetBrokResponse `thrift:"success,0,optional" frugal:"0,optional,ProGetBrokResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsProGetBrokerResult() *ZkServer_OperationsProGetBrokerResult {
	return &ZkServer_OperationsProGetBrokerResult{}
}

func (p *ZkServer_OperationsProGetBrokerResult) InitDefault() {
}

var ZkServer_OperationsProGetBrokerResult_Success_DEFAULT *ProGetBrokResponse

func (p *ZkServer_OperationsProGetBrokerResult) GetSuccess() (v *ProGetBrokResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsProGetBrokerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsProGetBrokerResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProGetBrokResponse)
}

func (p *ZkServer_OperationsProGetBrokerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsProGetBrokerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsProGetBrokerResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsProGetBrokerResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsSetPartitionStateArgs struct {
	Req *SetPartitionStateRequest `thrift:"req,1" frugal:"1,default,SetPartitionStateRequest" json:"req"`
}

func NewZkServer_OperationsSetPartitionStateArgs() *ZkServer_OperationsSetPartitionStateArgs {
	return &ZkServer_OperationsSetPartitionStateArgs{}
}

func (p *ZkServer_OperationsSetPartitionStateArgs) InitDefault() {
}

var ZkServer_OperationsSetPartitionStateArgs_Req_DEFAULT *SetPartitionStateRequest

func (p *ZkServer_OperationsSetPartitionStateArgs) GetReq() (v *SetPartitionStateRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsSetPartitionStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsSetPartitionStateArgs) SetReq(val *SetPartitionStateRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsSetPartitionStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsSetPartitionStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsSetPartitionStateArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsSetPartitionStateArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsSetPartitionStateResult struct {
	Success *SetPartitionStateResponse `thrift:"success,0,optional" frugal:"0,optional,SetPartitionStateResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsSetPartitionStateResult() *ZkServer_OperationsSetPartitionStateResult {
	return &ZkServer_OperationsSetPartitionStateResult{}
}

func (p *ZkServer_OperationsSetPartitionStateResult) InitDefault() {
}

var ZkServer_OperationsSetPartitionStateResult_Success_DEFAULT *SetPartitionStateResponse

func (p *ZkServer_OperationsSetPartitionStateResult) GetSuccess() (v *SetPartitionStateResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsSetPartitionStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsSetPartitionStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetPartitionStateResponse)
}

func (p *ZkServer_OperationsSetPartitionStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsSetPartitionStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsSetPartitionStateResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsSetPartitionStateResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsConStartGetBrokerArgs struct {
	Req *ConStartGetBrokRequest `thrift:"req,1" frugal:"1,default,ConStartGetBrokRequest" json:"req"`
}

func NewZkServer_OperationsConStartGetBrokerArgs() *ZkServer_OperationsConStartGetBrokerArgs {
	return &ZkServer_OperationsConStartGetBrokerArgs{}
}

func (p *ZkServer_OperationsConStartGetBrokerArgs) InitDefault() {
}

var ZkServer_OperationsConStartGetBrokerArgs_Req_DEFAULT *ConStartGetBrokRequest

func (p *ZkServer_OperationsConStartGetBrokerArgs) GetReq() (v *ConStartGetBrokRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsConStartGetBrokerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsConStartGetBrokerArgs) SetReq(val *ConStartGetBrokRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsConStartGetBrokerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsConStartGetBrokerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsConStartGetBrokerArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsConStartGetBrokerArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsConStartGetBrokerResult struct {
	Success *ConStartGetBrokResponse `thrift:"success,0,optional" frugal:"0,optional,ConStartGetBrokResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsConStartGetBrokerResult() *ZkServer_OperationsConStartGetBrokerResult {
	return &ZkServer_OperationsConStartGetBrokerResult{}
}

func (p *ZkServer_OperationsConStartGetBrokerResult) InitDefault() {
}

var ZkServer_OperationsConStartGetBrokerResult_Success_DEFAULT *ConStartGetBrokResponse

func (p *ZkServer_OperationsConStartGetBrokerResult) GetSuccess() (v *ConStartGetBrokResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsConStartGetBrokerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsConStartGetBrokerResult) SetSuccess(x interface{}) {
	p.Success = x.(*ConStartGetBrokResponse)
}

func (p *ZkServer_OperationsConStartGetBrokerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsConStartGetBrokerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsConStartGetBrokerResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsConStartGetBrokerResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsBroInfoArgs struct {
	Req *BroInfoRequest `thrift:"req,1" frugal:"1,default,BroInfoRequest" json:"req"`
}

func NewZkServer_OperationsBroInfoArgs() *ZkServer_OperationsBroInfoArgs {
	return &ZkServer_OperationsBroInfoArgs{}
}

func (p *ZkServer_OperationsBroInfoArgs) InitDefault() {
}

var ZkServer_OperationsBroInfoArgs_Req_DEFAULT *BroInfoRequest

func (p *ZkServer_OperationsBroInfoArgs) GetReq() (v *BroInfoRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsBroInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsBroInfoArgs) SetReq(val *BroInfoRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsBroInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsBroInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBroInfoArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBroInfoArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsBroInfoResult struct {
	Success *BroInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BroInfoResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsBroInfoResult() *ZkServer_OperationsBroInfoResult {
	return &ZkServer_OperationsBroInfoResult{}
}

func (p *ZkServer_OperationsBroInfoResult) InitDefault() {
}

var ZkServer_OperationsBroInfoResult_Success_DEFAULT *BroInfoResponse

func (p *ZkServer_OperationsBroInfoResult) GetSuccess() (v *BroInfoResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsBroInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsBroInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BroInfoResponse)
}

func (p *ZkServer_OperationsBroInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsBroInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBroInfoResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBroInfoResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsUpdatePTPOffsetArgs struct {
	Req *UpdatePTPOffsetRequest `thrift:"req,1" frugal:"1,default,UpdatePTPOffsetRequest" json:"req"`
}

func NewZkServer_OperationsUpdatePTPOffsetArgs() *ZkServer_OperationsUpdatePTPOffsetArgs {
	return &ZkServer_OperationsUpdatePTPOffsetArgs{}
}

func (p *ZkServer_OperationsUpdatePTPOffsetArgs) InitDefault() {
}

var ZkServer_OperationsUpdatePTPOffsetArgs_Req_DEFAULT *UpdatePTPOffsetRequest

func (p *ZkServer_OperationsUpdatePTPOffsetArgs) GetReq() (v *UpdatePTPOffsetRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsUpdatePTPOffsetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsUpdatePTPOffsetArgs) SetReq(val *UpdatePTPOffsetRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsUpdatePTPOffsetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsUpdatePTPOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsUpdatePTPOffsetArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsUpdatePTPOffsetArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsUpdatePTPOffsetResult struct {
	Success *UpdatePTPOffsetResponse `thrift:"success,0,optional" frugal:"0,optional,UpdatePTPOffsetResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsUpdatePTPOffsetResult() *ZkServer_OperationsUpdatePTPOffsetResult {
	return &ZkServer_OperationsUpdatePTPOffsetResult{}
}

func (p *ZkServer_OperationsUpdatePTPOffsetResult) InitDefault() {
}

var ZkServer_OperationsUpdatePTPOffsetResult_Success_DEFAULT *UpdatePTPOffsetResponse

func (p *ZkServer_OperationsUpdatePTPOffsetResult) GetSuccess() (v *UpdatePTPOffsetResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsUpdatePTPOffsetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsUpdatePTPOffsetResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePTPOffsetResponse)
}

func (p *ZkServer_OperationsUpdatePTPOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsUpdatePTPOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsUpdatePTPOffsetResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsUpdatePTPOffsetResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsUpdateDupArgs struct {
	Req *UpdateDupRequest `thrift:"req,1" frugal:"1,default,UpdateDupRequest" json:"req"`
}

func NewZkServer_OperationsUpdateDupArgs() *ZkServer_OperationsUpdateDupArgs {
	return &ZkServer_OperationsUpdateDupArgs{}
}

func (p *ZkServer_OperationsUpdateDupArgs) InitDefault() {
}

var ZkServer_OperationsUpdateDupArgs_Req_DEFAULT *UpdateDupRequest

func (p *ZkServer_OperationsUpdateDupArgs) GetReq() (v *UpdateDupRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsUpdateDupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsUpdateDupArgs) SetReq(val *UpdateDupRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsUpdateDupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsUpdateDupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsUpdateDupArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsUpdateDupArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsUpdateDupResult struct {
	Success *UpdateDupResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDupResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsUpdateDupResult() *ZkServer_OperationsUpdateDupResult {
	return &ZkServer_OperationsUpdateDupResult{}
}

func (p *ZkServer_OperationsUpdateDupResult) InitDefault() {
}

var ZkServer_OperationsUpdateDupResult_Success_DEFAULT *UpdateDupResponse

func (p *ZkServer_OperationsUpdateDupResult) GetSuccess() (v *UpdateDupResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsUpdateDupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsUpdateDupResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDupResponse)
}

func (p *ZkServer_OperationsUpdateDupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsUpdateDupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsUpdateDupResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsUpdateDupResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsBecomeLeaderArgs struct {
	Req *BecomeLeaderRequest `thrift:"req,1" frugal:"1,default,BecomeLeaderRequest" json:"req"`
}

func NewZkServer_OperationsBecomeLeaderArgs() *ZkServer_OperationsBecomeLeaderArgs {
	return &ZkServer_OperationsBecomeLeaderArgs{}
}

func (p *ZkServer_OperationsBecomeLeaderArgs) InitDefault() {
}

var ZkServer_OperationsBecomeLeaderArgs_Req_DEFAULT *BecomeLeaderRequest

func (p *ZkServer_OperationsBecomeLeaderArgs) GetReq() (v *BecomeLeaderRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsBecomeLeaderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsBecomeLeaderArgs) SetReq(val *BecomeLeaderRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsBecomeLeaderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsBecomeLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBecomeLeaderArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBecomeLeaderArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsBecomeLeaderResult struct {
	Success *BecomeLeaderResponse `thrift:"success,0,optional" frugal:"0,optional,BecomeLeaderResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsBecomeLeaderResult() *ZkServer_OperationsBecomeLeaderResult {
	return &ZkServer_OperationsBecomeLeaderResult{}
}

func (p *ZkServer_OperationsBecomeLeaderResult) InitDefault() {
}

var ZkServer_OperationsBecomeLeaderResult_Success_DEFAULT *BecomeLeaderResponse

func (p *ZkServer_OperationsBecomeLeaderResult) GetSuccess() (v *BecomeLeaderResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsBecomeLeaderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsBecomeLeaderResult) SetSuccess(x interface{}) {
	p.Success = x.(*BecomeLeaderResponse)
}

func (p *ZkServer_OperationsBecomeLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsBecomeLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBecomeLeaderResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBecomeLeaderResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsGetNewLeaderArgs struct {
	Req *GetNewLeaderRequest `thrift:"req,1" frugal:"1,default,GetNewLeaderRequest" json:"req"`
}

func NewZkServer_OperationsGetNewLeaderArgs() *ZkServer_OperationsGetNewLeaderArgs {
	return &ZkServer_OperationsGetNewLeaderArgs{}
}

func (p *ZkServer_OperationsGetNewLeaderArgs) InitDefault() {
}

var ZkServer_OperationsGetNewLeaderArgs_Req_DEFAULT *GetNewLeaderRequest

func (p *ZkServer_OperationsGetNewLeaderArgs) GetReq() (v *GetNewLeaderRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsGetNewLeaderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsGetNewLeaderArgs) SetReq(val *GetNewLeaderRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsGetNewLeaderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsGetNewLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsGetNewLeaderArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsGetNewLeaderArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsGetNewLeaderResult struct {
	Success *GetNewLeaderResponse `thrift:"success,0,optional" frugal:"0,optional,GetNewLeaderResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsGetNewLeaderResult() *ZkServer_OperationsGetNewLeaderResult {
	return &ZkServer_OperationsGetNewLeaderResult{}
}

func (p *ZkServer_OperationsGetNewLeaderResult) InitDefault() {
}

var ZkServer_OperationsGetNewLeaderResult_Success_DEFAULT *GetNewLeaderResponse

func (p *ZkServer_OperationsGetNewLeaderResult) GetSuccess() (v *GetNewLeaderResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsGetNewLeaderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsGetNewLeaderResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetNewLeaderResponse)
}

func (p *ZkServer_OperationsGetNewLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsGetNewLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsGetNewLeaderResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsGetNewLeaderResult = map[int16]string{
	0: "success",
}

type ZkServer_OperationsBroGetConfigArgs struct {
	Req *BroGetConfigRequest `thrift:"req,1" frugal:"1,default,BroGetConfigRequest" json:"req"`
}

func NewZkServer_OperationsBroGetConfigArgs() *ZkServer_OperationsBroGetConfigArgs {
	return &ZkServer_OperationsBroGetConfigArgs{}
}

func (p *ZkServer_OperationsBroGetConfigArgs) InitDefault() {
}

var ZkServer_OperationsBroGetConfigArgs_Req_DEFAULT *BroGetConfigRequest

func (p *ZkServer_OperationsBroGetConfigArgs) GetReq() (v *BroGetConfigRequest) {
	if !p.IsSetReq() {
		return ZkServer_OperationsBroGetConfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ZkServer_OperationsBroGetConfigArgs) SetReq(val *BroGetConfigRequest) {
	p.Req = val
}

func (p *ZkServer_OperationsBroGetConfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ZkServer_OperationsBroGetConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBroGetConfigArgs(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBroGetConfigArgs = map[int16]string{
	1: "req",
}

type ZkServer_OperationsBroGetConfigResult struct {
	Success *BroGetConfigResponse `thrift:"success,0,optional" frugal:"0,optional,BroGetConfigResponse" json:"success,omitempty"`
}

func NewZkServer_OperationsBroGetConfigResult() *ZkServer_OperationsBroGetConfigResult {
	return &ZkServer_OperationsBroGetConfigResult{}
}

func (p *ZkServer_OperationsBroGetConfigResult) InitDefault() {
}

var ZkServer_OperationsBroGetConfigResult_Success_DEFAULT *BroGetConfigResponse

func (p *ZkServer_OperationsBroGetConfigResult) GetSuccess() (v *BroGetConfigResponse) {
	if !p.IsSetSuccess() {
		return ZkServer_OperationsBroGetConfigResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ZkServer_OperationsBroGetConfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*BroGetConfigResponse)
}

func (p *ZkServer_OperationsBroGetConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ZkServer_OperationsBroGetConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZkServer_OperationsBroGetConfigResult(%+v)", *p)
}

var fieldIDToName_ZkServer_OperationsBroGetConfigResult = map[int16]string{
	0: "success",
}

type Client_Operations interface {
	Pub(ctx context.Context, req *PubRequest) (r *PubResponse, err error)

	Pingpong(ctx context.Context, req *PingPongRequest) (r *PingPongResponse, err error)
}

type Client_OperationsPubArgs struct {
	Req *PubRequest `thrift:"req,1" frugal:"1,default,PubRequest" json:"req"`
}

func NewClient_OperationsPubArgs() *Client_OperationsPubArgs {
	return &Client_OperationsPubArgs{}
}

func (p *Client_OperationsPubArgs) InitDefault() {
}

var Client_OperationsPubArgs_Req_DEFAULT *PubRequest

func (p *Client_OperationsPubArgs) GetReq() (v *PubRequest) {
	if !p.IsSetReq() {
		return Client_OperationsPubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Client_OperationsPubArgs) SetReq(val *PubRequest) {
	p.Req = val
}

func (p *Client_OperationsPubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Client_OperationsPubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPubArgs(%+v)", *p)
}

var fieldIDToName_Client_OperationsPubArgs = map[int16]string{
	1: "req",
}

type Client_OperationsPubResult struct {
	Success *PubResponse `thrift:"success,0,optional" frugal:"0,optional,PubResponse" json:"success,omitempty"`
}

func NewClient_OperationsPubResult() *Client_OperationsPubResult {
	return &Client_OperationsPubResult{}
}

func (p *Client_OperationsPubResult) InitDefault() {
}

var Client_OperationsPubResult_Success_DEFAULT *PubResponse

func (p *Client_OperationsPubResult) GetSuccess() (v *PubResponse) {
	if !p.IsSetSuccess() {
		return Client_OperationsPubResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Client_OperationsPubResult) SetSuccess(x interface{}) {
	p.Success = x.(*PubResponse)
}

func (p *Client_OperationsPubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Client_OperationsPubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPubResult(%+v)", *p)
}

var fieldIDToName_Client_OperationsPubResult = map[int16]string{
	0: "success",
}

type Client_OperationsPingpongArgs struct {
	Req *PingPongRequest `thrift:"req,1" frugal:"1,default,PingPongRequest" json:"req"`
}

func NewClient_OperationsPingpongArgs() *Client_OperationsPingpongArgs {
	return &Client_OperationsPingpongArgs{}
}

func (p *Client_OperationsPingpongArgs) InitDefault() {
}

var Client_OperationsPingpongArgs_Req_DEFAULT *PingPongRequest

func (p *Client_OperationsPingpongArgs) GetReq() (v *PingPongRequest) {
	if !p.IsSetReq() {
		return Client_OperationsPingpongArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *Client_OperationsPingpongArgs) SetReq(val *PingPongRequest) {
	p.Req = val
}

func (p *Client_OperationsPingpongArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *Client_OperationsPingpongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongArgs(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongArgs = map[int16]string{
	1: "req",
}

type Client_OperationsPingpongResult struct {
	Success *PingPongResponse `thrift:"success,0,optional" frugal:"0,optional,PingPongResponse" json:"success,omitempty"`
}

func NewClient_OperationsPingpongResult() *Client_OperationsPingpongResult {
	return &Client_OperationsPingpongResult{}
}

func (p *Client_OperationsPingpongResult) InitDefault() {
}

var Client_OperationsPingpongResult_Success_DEFAULT *PingPongResponse

func (p *Client_OperationsPingpongResult) GetSuccess() (v *PingPongResponse) {
	if !p.IsSetSuccess() {
		return Client_OperationsPingpongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *Client_OperationsPingpongResult) SetSuccess(x interface{}) {
	p.Success = x.(*PingPongResponse)
}

func (p *Client_OperationsPingpongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *Client_OperationsPingpongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Client_OperationsPingpongResult(%+v)", *p)
}

var fieldIDToName_Client_OperationsPingpongResult = map[int16]string{
	0: "success",
}
